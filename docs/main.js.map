{"version":3,"file":"main.js","sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/jsfxr/jsfxr.js","webpack:///./node_modules/worker-loader/dist/workers/InlineWorker.js","webpack:///./src/Background.js","webpack:///./src/Blood.js","webpack:///./src/BloodChunk.js","webpack:///./src/BloodCollection.js","webpack:///./src/Camera.js","webpack:///./src/Character.js","webpack:///./src/CollisionDetector.js","webpack:///./src/Drawer.js","webpack:///./src/Enemy.js","webpack:///./src/EnemyCollection.js","webpack:///./src/EnemyPersonas.js","webpack:///./src/GameContainer.js","webpack:///./src/GameObject.js","webpack:///./src/HUD.js","webpack:///./src/Keyboard.js","webpack:///./src/Level.js","webpack:///./src/Map.js","webpack:///./src/Music.js","webpack:///./src/Package.js","webpack:///./src/PackageCollection.js","webpack:///./src/Player.js","webpack:///./src/Projectile.js","webpack:///./src/ProjectileCollection.js","webpack:///./src/Sound.js","webpack:///./src/Sprites.js","webpack:///./src/Weapon.js","webpack:///./src/WeaponFactory.js","webpack:///./src/index.js","webpack:///./src/sound-box.worker.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","/**\n * SfxrParams\n *\n * Copyright 2010 Thomas Vian\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author Thomas Vian\n */\n/** @constructor */\nfunction SfxrParams() {\n  //--------------------------------------------------------------------------\n  //\n  //  Settings String Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Parses a settings array into the parameters\n   * @param array Array of the settings values, where elements 0 - 23 are\n   *                a: waveType\n   *                b: attackTime\n   *                c: sustainTime\n   *                d: sustainPunch\n   *                e: decayTime\n   *                f: startFrequency\n   *                g: minFrequency\n   *                h: slide\n   *                i: deltaSlide\n   *                j: vibratoDepth\n   *                k: vibratoSpeed\n   *                l: changeAmount\n   *                m: changeSpeed\n   *                n: squareDuty\n   *                o: dutySweep\n   *                p: repeatSpeed\n   *                q: phaserOffset\n   *                r: phaserSweep\n   *                s: lpFilterCutoff\n   *                t: lpFilterCutoffSweep\n   *                u: lpFilterResonance\n   *                v: hpFilterCutoff\n   *                w: hpFilterCutoffSweep\n   *                x: masterVolume\n   * @return If the string successfully parsed\n   */\n  this.setSettings = function(values)\n  {\n    for ( var i = 0; i < 24; i++ )\n    {\n      this[String.fromCharCode( 97 + i )] = values[i] || 0;\n    }\n\n    // I moved this here from the reset(true) function\n    if (this['c'] < .01) {\n      this['c'] = .01;\n    }\n\n    var totalTime = this['b'] + this['c'] + this['e'];\n    if (totalTime < .18) {\n      var multiplier = .18 / totalTime;\n      this['b']  *= multiplier;\n      this['c'] *= multiplier;\n      this['e']   *= multiplier;\n    }\n  }\n}\n\n/**\n * SfxrSynth\n *\n * Copyright 2010 Thomas Vian\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * @author Thomas Vian\n */\n/** @constructor */\nfunction SfxrSynth() {\n  // All variables are kept alive through function closures\n\n  //--------------------------------------------------------------------------\n  //\n  //  Sound Parameters\n  //\n  //--------------------------------------------------------------------------\n\n  this._params = new SfxrParams();  // Params instance\n\n  //--------------------------------------------------------------------------\n  //\n  //  Synth Variables\n  //\n  //--------------------------------------------------------------------------\n\n  var _envelopeLength0, // Length of the attack stage\n      _envelopeLength1, // Length of the sustain stage\n      _envelopeLength2, // Length of the decay stage\n\n      _period,          // Period of the wave\n      _maxPeriod,       // Maximum period before sound stops (from minFrequency)\n\n      _slide,           // Note slide\n      _deltaSlide,      // Change in slide\n\n      _changeAmount,    // Amount to change the note by\n      _changeTime,      // Counter for the note change\n      _changeLimit,     // Once the time reaches this limit, the note changes\n\n      _squareDuty,      // Offset of center switching point in the square wave\n      _dutySweep;       // Amount to change the duty by\n\n  //--------------------------------------------------------------------------\n  //\n  //  Synth Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Resets the runing variables from the params\n   * Used once at the start (total reset) and for the repeat effect (partial reset)\n   */\n  this.reset = function() {\n    // Shorter reference\n    var p = this._params;\n\n    _period       = 100 / (p['f'] * p['f'] + .001);\n    _maxPeriod    = 100 / (p['g']   * p['g']   + .001);\n\n    _slide        = 1 - p['h'] * p['h'] * p['h'] * .01;\n    _deltaSlide   = -p['i'] * p['i'] * p['i'] * .000001;\n\n    if (!p['a']) {\n      _squareDuty = .5 - p['n'] / 2;\n      _dutySweep  = -p['o'] * .00005;\n    }\n\n    _changeAmount =  1 + p['l'] * p['l'] * (p['l'] > 0 ? -.9 : 10);\n    _changeTime   = 0;\n    _changeLimit  = p['m'] == 1 ? 0 : (1 - p['m']) * (1 - p['m']) * 20000 + 32;\n  }\n\n  // I split the reset() function into two functions for better readability\n  this.totalReset = function() {\n    this.reset();\n\n    // Shorter reference\n    var p = this._params;\n\n    // Calculating the length is all that remained here, everything else moved somewhere\n    _envelopeLength0 = p['b']  * p['b']  * 100000;\n    _envelopeLength1 = p['c'] * p['c'] * 100000;\n    _envelopeLength2 = p['e']   * p['e']   * 100000 + 12;\n    // Full length of the volume envelop (and therefore sound)\n    // Make sure the length can be divided by 3 so we will not need the padding \"==\" after base64 encode\n    return ((_envelopeLength0 + _envelopeLength1 + _envelopeLength2) / 3 | 0) * 3;\n  }\n\n  /**\n   * Writes the wave to the supplied buffer ByteArray\n   * @param buffer A ByteArray to write the wave to\n   * @return If the wave is finished\n   */\n  this.synthWave = function(buffer, length) {\n    // Shorter reference\n    var p = this._params;\n\n    // If the filters are active\n    var _filters = p['s'] != 1 || p['v'],\n        // Cutoff multiplier which adjusts the amount the wave position can move\n        _hpFilterCutoff = p['v'] * p['v'] * .1,\n        // Speed of the high-pass cutoff multiplier\n        _hpFilterDeltaCutoff = 1 + p['w'] * .0003,\n        // Cutoff multiplier which adjusts the amount the wave position can move\n        _lpFilterCutoff = p['s'] * p['s'] * p['s'] * .1,\n        // Speed of the low-pass cutoff multiplier\n        _lpFilterDeltaCutoff = 1 + p['t'] * .0001,\n        // If the low pass filter is active\n        _lpFilterOn = p['s'] != 1,\n        // masterVolume * masterVolume (for quick calculations)\n        _masterVolume = p['x'] * p['x'],\n        // Minimum frequency before stopping\n        _minFreqency = p['g'],\n        // If the phaser is active\n        _phaser = p['q'] || p['r'],\n        // Change in phase offset\n        _phaserDeltaOffset = p['r'] * p['r'] * p['r'] * .2,\n        // Phase offset for phaser effect\n        _phaserOffset = p['q'] * p['q'] * (p['q'] < 0 ? -1020 : 1020),\n        // Once the time reaches this limit, some of the    iables are reset\n        _repeatLimit = p['p'] ? ((1 - p['p']) * (1 - p['p']) * 20000 | 0) + 32 : 0,\n        // The punch factor (louder at begining of sustain)\n        _sustainPunch = p['d'],\n        // Amount to change the period of the wave by at the peak of the vibrato wave\n        _vibratoAmplitude = p['j'] / 2,\n        // Speed at which the vibrato phase moves\n        _vibratoSpeed = p['k'] * p['k'] * .01,\n        // The type of wave to generate\n        _waveType = p['a'];\n\n    var _envelopeLength      = _envelopeLength0,     // Length of the current envelope stage\n        _envelopeOverLength0 = 1 / _envelopeLength0, // (for quick calculations)\n        _envelopeOverLength1 = 1 / _envelopeLength1, // (for quick calculations)\n        _envelopeOverLength2 = 1 / _envelopeLength2; // (for quick calculations)\n\n    // Damping muliplier which restricts how fast the wave position can move\n    var _lpFilterDamping = 5 / (1 + p['u'] * p['u'] * 20) * (.01 + _lpFilterCutoff);\n    if (_lpFilterDamping > .8) {\n      _lpFilterDamping = .8;\n    }\n    _lpFilterDamping = 1 - _lpFilterDamping;\n\n    var _finished = false,     // If the sound has finished\n        _envelopeStage    = 0, // Current stage of the envelope (attack, sustain, decay, end)\n        _envelopeTime     = 0, // Current time through current enelope stage\n        _envelopeVolume   = 0, // Current volume of the envelope\n        _hpFilterPos      = 0, // Adjusted wave position after high-pass filter\n        _lpFilterDeltaPos = 0, // Change in low-pass wave position, as allowed by the cutoff and damping\n        _lpFilterOldPos,       // Previous low-pass wave position\n        _lpFilterPos      = 0, // Adjusted wave position after low-pass filter\n        _periodTemp,           // Period modified by vibrato\n        _phase            = 0, // Phase through the wave\n        _phaserInt,            // Integer phaser offset, for bit maths\n        _phaserPos        = 0, // Position through the phaser buffer\n        _pos,                  // Phase expresed as a Number from 0-1, used for fast sin approx\n        _repeatTime       = 0, // Counter for the repeats\n        _sample,               // Sub-sample calculated 8 times per actual sample, averaged out to get the super sample\n        _superSample,          // Actual sample writen to the wave\n        _vibratoPhase     = 0; // Phase through the vibrato sine wave\n\n    // Buffer of wave values used to create the out of phase second wave\n    var _phaserBuffer = new Array(1024),\n        // Buffer of random values used to generate noise\n        _noiseBuffer  = new Array(32);\n    for (var i = _phaserBuffer.length; i--; ) {\n      _phaserBuffer[i] = 0;\n    }\n    for (var i = _noiseBuffer.length; i--; ) {\n      _noiseBuffer[i] = Math.random() * 2 - 1;\n    }\n\n    for (var i = 0; i < length; i++) {\n      if (_finished) {\n        return i;\n      }\n\n      // Repeats every _repeatLimit times, partially resetting the sound parameters\n      if (_repeatLimit) {\n        if (++_repeatTime >= _repeatLimit) {\n          _repeatTime = 0;\n          this.reset();\n        }\n      }\n\n      // If _changeLimit is reached, shifts the pitch\n      if (_changeLimit) {\n        if (++_changeTime >= _changeLimit) {\n          _changeLimit = 0;\n          _period *= _changeAmount;\n        }\n      }\n\n      // Acccelerate and apply slide\n      _slide += _deltaSlide;\n      _period *= _slide;\n\n      // Checks for frequency getting too low, and stops the sound if a minFrequency was set\n      if (_period > _maxPeriod) {\n        _period = _maxPeriod;\n        if (_minFreqency > 0) {\n          _finished = true;\n        }\n      }\n\n      _periodTemp = _period;\n\n      // Applies the vibrato effect\n      if (_vibratoAmplitude > 0) {\n        _vibratoPhase += _vibratoSpeed;\n        _periodTemp *= 1 + Math.sin(_vibratoPhase) * _vibratoAmplitude;\n      }\n\n      _periodTemp |= 0;\n      if (_periodTemp < 8) {\n        _periodTemp = 8;\n      }\n\n      // Sweeps the square duty\n      if (!_waveType) {\n        _squareDuty += _dutySweep;\n        if (_squareDuty < 0) {\n          _squareDuty = 0;\n        } else if (_squareDuty > .5) {\n          _squareDuty = .5;\n        }\n      }\n\n      // Moves through the different stages of the volume envelope\n      if (++_envelopeTime > _envelopeLength) {\n        _envelopeTime = 0;\n\n        switch (++_envelopeStage)  {\n          case 1:\n            _envelopeLength = _envelopeLength1;\n            break;\n          case 2:\n            _envelopeLength = _envelopeLength2;\n        }\n      }\n\n      // Sets the volume based on the position in the envelope\n      switch (_envelopeStage) {\n        case 0:\n          _envelopeVolume = _envelopeTime * _envelopeOverLength0;\n          break;\n        case 1:\n          _envelopeVolume = 1 + (1 - _envelopeTime * _envelopeOverLength1) * 2 * _sustainPunch;\n          break;\n        case 2:\n          _envelopeVolume = 1 - _envelopeTime * _envelopeOverLength2;\n          break;\n        case 3:\n          _envelopeVolume = 0;\n          _finished = true;\n      }\n\n      // Moves the phaser offset\n      if (_phaser) {\n        _phaserOffset += _phaserDeltaOffset;\n        _phaserInt = _phaserOffset | 0;\n        if (_phaserInt < 0) {\n          _phaserInt = -_phaserInt;\n        } else if (_phaserInt > 1023) {\n          _phaserInt = 1023;\n        }\n      }\n\n      // Moves the high-pass filter cutoff\n      if (_filters && _hpFilterDeltaCutoff) {\n        _hpFilterCutoff *= _hpFilterDeltaCutoff;\n        if (_hpFilterCutoff < .00001) {\n          _hpFilterCutoff = .00001;\n        } else if (_hpFilterCutoff > .1) {\n          _hpFilterCutoff = .1;\n        }\n      }\n\n      _superSample = 0;\n      for (var j = 8; j--; ) {\n        // Cycles through the period\n        _phase++;\n        if (_phase >= _periodTemp) {\n          _phase %= _periodTemp;\n\n          // Generates new random noise for this period\n          if (_waveType == 3) {\n            for (var n = _noiseBuffer.length; n--; ) {\n              _noiseBuffer[n] = Math.random() * 2 - 1;\n            }\n          }\n        }\n\n        // Gets the sample from the oscillator\n        switch (_waveType) {\n          case 0: // Square wave\n            _sample = ((_phase / _periodTemp) < _squareDuty) ? .5 : -.5;\n            break;\n          case 1: // Saw wave\n            _sample = 1 - _phase / _periodTemp * 2;\n            break;\n          case 2: // Sine wave (fast and accurate approx)\n            _pos = _phase / _periodTemp;\n            _pos = (_pos > .5 ? _pos - 1 : _pos) * 6.28318531;\n            _sample = 1.27323954 * _pos + .405284735 * _pos * _pos * (_pos < 0 ? 1 : -1);\n            _sample = .225 * ((_sample < 0 ? -1 : 1) * _sample * _sample  - _sample) + _sample;\n            break;\n          case 3: // Noise\n            _sample = _noiseBuffer[Math.abs(_phase * 32 / _periodTemp | 0)];\n        }\n\n        // Applies the low and high pass filters\n        if (_filters) {\n          _lpFilterOldPos = _lpFilterPos;\n          _lpFilterCutoff *= _lpFilterDeltaCutoff;\n          if (_lpFilterCutoff < 0) {\n            _lpFilterCutoff = 0;\n          } else if (_lpFilterCutoff > .1) {\n            _lpFilterCutoff = .1;\n          }\n\n          if (_lpFilterOn) {\n            _lpFilterDeltaPos += (_sample - _lpFilterPos) * _lpFilterCutoff;\n            _lpFilterDeltaPos *= _lpFilterDamping;\n          } else {\n            _lpFilterPos = _sample;\n            _lpFilterDeltaPos = 0;\n          }\n\n          _lpFilterPos += _lpFilterDeltaPos;\n\n          _hpFilterPos += _lpFilterPos - _lpFilterOldPos;\n          _hpFilterPos *= 1 - _hpFilterCutoff;\n          _sample = _hpFilterPos;\n        }\n\n        // Applies the phaser effect\n        if (_phaser) {\n          _phaserBuffer[_phaserPos % 1024] = _sample;\n          _sample += _phaserBuffer[(_phaserPos - _phaserInt + 1024) % 1024];\n          _phaserPos++;\n        }\n\n        _superSample += _sample;\n      }\n\n      // Averages out the super samples and applies volumes\n      _superSample *= .125 * _envelopeVolume * _masterVolume;\n\n      // Clipping if too loud\n      buffer[i] = _superSample >= 1 ? 32767 : _superSample <= -1 ? -32768 : _superSample * 32767 | 0;\n    }\n\n    return length;\n  }\n}\n\n// Adapted from http://codebase.es/riffwave/\nvar synth = new SfxrSynth();\n// Export for the Closure Compiler\nvar jsfxr = function(settings) {\n  // Initialize SfxrParams\n  synth._params.setSettings(settings);\n  // Synthesize Wave\n  var envelopeFullLength = synth.totalReset();\n  var data = new Uint8Array(((envelopeFullLength + 1) / 2 | 0) * 4 + 44);\n  var used = synth.synthWave(new Uint16Array(data.buffer, 44), envelopeFullLength) * 2;\n  var dv = new Uint32Array(data.buffer, 0, 44);\n  // Initialize header\n  dv[0] = 0x46464952; // \"RIFF\"\n  dv[1] = used + 36;  // put total size here\n  dv[2] = 0x45564157; // \"WAVE\"\n  dv[3] = 0x20746D66; // \"fmt \"\n  dv[4] = 0x00000010; // size of the following\n  dv[5] = 0x00010001; // Mono: 1 channel, PCM format\n  dv[6] = 0x0000AC44; // 44,100 samples per second\n  dv[7] = 0x00015888; // byte rate: two bytes per sample\n  dv[8] = 0x00100002; // 16 bits per sample, aligned on every two bytes\n  dv[9] = 0x61746164; // \"data\"\n  dv[10] = used;      // put number of samples here\n\n  // Base64 encoding written by me, @maettig\n  used += 44;\n  var i = 0,\n      base64Characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n      output = 'data:audio/wav;base64,';\n  for (; i < used; i += 3)\n  {\n    var a = data[i] << 16 | data[i + 1] << 8 | data[i + 2];\n    output += base64Characters[a >> 18] + base64Characters[a >> 12 & 63] + base64Characters[a >> 6 & 63] + base64Characters[a & 63];\n  }\n  return output;\n}\n\nif (typeof require === 'function') {\n  module.exports = jsfxr;\n}\nelse {\n  this.jsfxr = jsfxr;\n}\n","'use strict';\n\n// http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\n\nvar URL = window.URL || window.webkitURL;\n\nmodule.exports = function (content, url) {\n  try {\n    try {\n      var blob;\n\n      try {\n        // BlobBuilder = Deprecated, but widely implemented\n        var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\n\n        blob = new BlobBuilder();\n\n        blob.append(content);\n\n        blob = blob.getBlob();\n      } catch (e) {\n        // The proposed API\n        blob = new Blob([content]);\n      }\n\n      return new Worker(URL.createObjectURL(blob));\n    } catch (e) {\n      return new Worker('data:application/javascript,' + encodeURIComponent(content));\n    }\n  } catch (e) {\n    if (!url) {\n      throw Error('Inline worker is not supported');\n    }\n\n    return new Worker(url);\n  }\n};","let nearStars = [];\nlet farStars = [];\n\nfunction mod(n, m) {\n  return ((n % m) + m) % m;\n}\n\nexport default class Background {\n  constructor({ cw, ch }) {\n    for (let i = 0; i < 10; i++)\n      nearStars.push([Math.random() * cw, Math.random() * ch, Math.random()]);\n    for (let i = 0; i < 10; i++)\n      farStars.push([Math.random() * cw, Math.random() * ch, Math.random()]);\n  }\n  draw(drawer) {\n    drawer.draw(() => {\n      drawer.drawBackground(\"#111\");\n      nearStars.map((star) =>\n        drawer.rect({\n          rect: [\n            mod(\n              star[0] - drawer.camera.x / (3 + 3 * star[2]),\n              drawer.canvas.width\n            ),\n            mod(\n              star[1] - drawer.camera.y / (3 + 3 * star[2]),\n              drawer.canvas.height\n            ),\n            1,\n            1,\n          ],\n          fillColor: \"rgba(255, 255, 255, 0.6)\",\n          adjusted: false,\n        })\n      );\n      farStars.map((star) =>\n        drawer.rect({\n          rect: [\n            mod(\n              star[0] - drawer.camera.x / (7 + 3 * star[2]),\n              drawer.canvas.width\n            ),\n            mod(\n              star[1] - drawer.camera.y / (7 + 3 * star[2]),\n              drawer.canvas.height\n            ),\n            1,\n            1,\n          ],\n          fillColor: \"rgba(255, 255, 255, 0.3)\",\n          adjusted: false,\n        })\n      );\n    });\n  }\n}\n","import GameObject from \"./GameObject\";\n\nclass Blood extends GameObject {\n  constructor(x, y, dx, dy, color) {\n    super({ x, y, grav: 0.1 });\n    this.dx = dx;\n    this.dy = dy;\n    this.color = color;\n    this.stuck = false;\n  }\n\n  stick() {\n    this.stuck = true;\n  }\n\n  tick() {\n    if (this.stuck) return;\n    this.x += this.dx;\n    this.dy += this.grav;\n    this.y += this.dy;\n  }\n\n  draw(drawer) {\n    drawer.rect({\n      fillColor: this.color,\n      rect: [this.x, this.y, 1, 1],\n    });\n  }\n}\n\nexport default Blood;\n","import GameObject from \"./GameObject\";\n\nclass BloodChunk extends GameObject {\n  constructor(x, y, dx, dy, color) {\n    super({ x, y });\n    this.dx = dx;\n    this.dy = dy;\n    this.grav = 0.1;\n    this.color = color;\n    this.stuck = false;\n  }\n\n  stick() {\n    this.stuck = true;\n  }\n\n  tick() {\n    if (this.stuck) return;\n    this.x += this.dx;\n    this.dy += this.grav;\n    this.y += this.dy;\n  }\n\n  draw(drawer) {\n    drawer.rect({\n      fillColor: this.color,\n      rect: [this.x, this.y - 2, 2, 3],\n    });\n\n    [\n      [1, 2],\n      [2, 3],\n    ].forEach(([x, y]) => {\n      drawer.rect({\n        fillColor: this.color,\n        rect: [this.x + x - 2, this.y + y - 2, 1, 1],\n      });\n    });\n\n    [\n      [2, 0],\n      [1, 1],\n      [0, 2],\n      [1, 3],\n    ].forEach(([x, y]) => {\n      drawer.rect({\n        fillColor: \"#FF77A8\",\n        rect: [this.x + x - 2, this.y + y - 2, 1, 1],\n      });\n    });\n  }\n}\n\nexport default BloodChunk;\n","class BloodCollection {\n  constructor() {\n    this.spurts = [];\n  }\n\n  add(blood) {\n    this.spurts.push(blood);\n  }\n\n  tick() {\n    if (this.spurts.length > 1000) {\n      this.spurts = this.spurts.slice(this.spurts.length - 1000);\n    }\n    this.spurts.forEach((s) => s.tick());\n  }\n\n  draw(drawer) {\n    this.spurts.forEach((s) => s.draw(drawer));\n  }\n}\n\nexport default BloodCollection;\n","const pullThreshold = 16;\nconst HUDSize = 15;\n\nclass Camera {\n  constructor() {\n    this.x = 0;\n    this.y = 128;\n    this.position_x = 0;\n    this.position_y = 128;\n    this.shakeRemaining = 0;\n    this.shakeForce = 0;\n  }\n\n  adjustX(x, width) {\n    return x - this.x + width / 2;\n  }\n\n  adjustY(y, height) {\n    return y - this.y + height / 2;\n  }\n\n  clampX(map) {\n    this.position_x = Math.round(\n      Math.min(\n        Math.max(8 * map.tileSize, this.position_x),\n        (map.mapLength - 8) * map.tileSize\n      )\n    );\n  }\n\n  clampY(map) {\n    this.position_y = Math.round(\n      Math.min(\n        Math.max(8 * map.tileSize, this.position_y),\n        (map.mapHeight - 8) * map.tileSize + HUDSize\n      )\n    );\n  }\n\n  followSubject(subject) {\n    if (subject.x - this.position_x > pullThreshold) {\n      this.position_x = subject.x - pullThreshold;\n    }\n    if (subject.x - this.position_x < -pullThreshold) {\n      this.position_x = subject.x + pullThreshold;\n    }\n    if (subject.y - this.position_y > pullThreshold) {\n      this.position_y = subject.y - pullThreshold;\n    }\n    if (subject.y - this.position_y < -pullThreshold) {\n      this.position_y = subject.y + pullThreshold;\n    }\n  }\n\n  shake(force, duration) {\n    this.shakeRemaining = duration;\n    this.shakeForce = force;\n  }\n\n  applyShake() {\n    this.shakeRemaining = Math.max(0, this.shakeRemaining - 1);\n    if (!this.shakeRemaining) return;\n    const shakeX = Math.random() * this.shakeForce * 2 - this.shakeForce;\n    const shakeY = Math.random() * this.shakeForce * 2 - this.shakeForce;\n    this.x += shakeX;\n    this.y += shakeY;\n  }\n\n  tick({ player, map }) {\n    this.followSubject(player, map);\n    this.clampX(map);\n    this.clampY(map);\n    this.x = this.position_x;\n    this.y = this.position_y;\n    this.applyShake();\n  }\n}\n\nexport default Camera;\n","import GameObject from \"./GameObject\";\nimport WeaponFactory from \"./WeaponFactory\";\n\nconst clamp = (num, min, max) => Math.min(Math.max(min, num), max);\n\nconst offset = 1;\n\nconst collideSide = (player, map) => {\n  let { x, y, dx, size } = player;\n\n  if (dx > 0) {\n    const rightTopTileType = map.getTile(x + size, y);\n    const rightBottomTileType = map.getTile(x + size, y + size - offset);\n    if (rightTopTileType || rightBottomTileType) {\n      player.dx = 0;\n      player.x = Math.floor(x / 8) * 8;\n    }\n  } else if (dx < 0) {\n    const leftTopTileType = map.getTile(x, y);\n    const leftBottomTileType = map.getTile(x, y + size - offset);\n    if (leftTopTileType || leftBottomTileType) {\n      player.dx = 0;\n      player.x = Math.floor(x / 8) * 8 + 8;\n    }\n  }\n};\n\nconst collideFloor = (player, map) => {\n  const { x, y, dy, size } = player;\n\n  if (dy < 0) return false;\n\n  const leftBottomTileType = map.getTile(x, y + size);\n  const rightBottomTileType = map.getTile(x + size - offset, y + size);\n\n  if (leftBottomTileType || rightBottomTileType) {\n    player.dy = 0;\n    player.y = Math.floor(y / 8) * 8;\n    player.grounded = true;\n    player.airtime = 0;\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst collideRoof = (player, map) => {\n  const { x, y, size } = player;\n  const leftTopTileType = map.getTile(x, y);\n  const rightTopTileType = map.getTile(x + size - offset, y);\n\n  if (leftTopTileType || rightTopTileType) {\n    player.dy = 0;\n    player.y = Math.floor((y - size / 2) / 8) * 8 + 8 + size / 2;\n    player.jumpHoldTime = 0;\n  }\n};\n\nclass Character extends GameObject {\n  constructor(x, y, health, facing) {\n    super({ x, y, maxDx: 1, maxDy: 2, grav: 0.15 });\n    this.size = 8;\n    this.acc = 0.05;\n    this.dcc = 0.8;\n    this.airDcc = 1;\n    this.grounded = true;\n    this.facing = facing || 1;\n    this.lifespan = 0;\n\n    // jumping\n    this.holdJump = 0;\n    this.airtime = 0;\n    this.jumpHoldTime = 0;\n    this.jumpSpeed = 2;\n    this.maxJumpPress = 12;\n\n    this.health = health;\n    this.maxHealth = health;\n\n    const weaponFactory = new WeaponFactory();\n    this.weapon = weaponFactory.random();\n  }\n\n  static tick({ camera, map, projectiles, presses, immobile }) {\n    this.lifespan += 1;\n\n    const { left, right, up, space } = presses;\n    this.holdJump = up ? this.holdJump + 1 : 0;\n\n    const weaponLocation = {\n      x: this.x + (this.facing === 1 ? this.size - 1 : 1),\n      y: this.y + 5,\n      facing: this.facing,\n    };\n    const knockback = this.weapon.tick(\n      space,\n      projectiles,\n      weaponLocation,\n      camera\n    );\n\n    // move x\n    if (left) {\n      this.dx -= this.acc;\n      this.facing = -1;\n    } else if (right) {\n      this.dx += this.acc;\n      this.facing = 1;\n    } else {\n      if (this.grounded) {\n        this.dx *= this.dcc;\n      } else {\n        this.dx *= this.airDcc;\n      }\n    }\n    if (Math.abs(this.dx) < 0.01) this.dx = 0;\n    this.dx = clamp(this.dx, -this.maxDx, this.maxDx);\n    this.dx += knockback * -this.facing;\n    this.x += immobile ? 0 : this.dx;\n\n    // hit walls\n    collideSide(this, map);\n\n    // jumping\n    if (up) {\n      const onGround = this.grounded || this.airtime < 5;\n      const newJump = this.holdJump < 10;\n      if (this.jumpHoldTime > 0 || (onGround && newJump)) {\n        this.jumpHoldTime += 1;\n        if (this.jumpHoldTime < this.maxJumpPress) {\n          this.dy = -this.jumpSpeed;\n        }\n      }\n    } else {\n      this.jumpHoldTime = 0;\n    }\n\n    // move y\n    this.dy += this.grav;\n    this.dy = clamp(this.dy, -this.maxDy, this.maxDy);\n    this.y += this.dy;\n\n    if (!collideFloor(this, map)) {\n      this.grounded = false;\n      this.airtime += 1;\n    }\n\n    collideRoof(this, map);\n  }\n\n  static takeDamage(damage) {\n    this.health -= damage;\n  }\n}\n\nexport default Character;\n","import Blood from \"./Blood\";\nimport Character from \"./Character\";\n\nconst collision = (a, b) => {\n  return (\n    a.x < b.x + b.size &&\n    a.x + a.size > b.x &&\n    a.y < b.y + b.size &&\n    a.y + a.size > b.y\n  );\n};\nexport default class CollisionDetector {\n  handleProjectile(projectile, object, spurts) {\n    if (\n      !(projectile.exploding || object.exploding) &&\n      collision(projectile, object)\n    ) {\n      projectile.destroy();\n      Character.takeDamage.call(\n        object,\n        projectile.damage * projectile.damageMod\n      );\n      for (let i = 0; i < projectile.blood; i++) {\n        spurts.add(\n          new Blood(\n            projectile.x,\n            projectile.y,\n            (projectile.dx / 3) * Math.random() * 2,\n            -1.5 * Math.random(),\n            object.bloodColor\n          )\n        );\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  handlePackage(packge, object, packages) {\n    if (collision(packge, object)) {\n      object.weapon = packge.weapon;\n      packages.packages = packages.packages.filter((p) => p !== packge);\n    }\n  }\n}\n","import Camera from \"./Camera\";\n\nlet cx = null;\n\nexport default class Drawer {\n  constructor(canvas) {\n    this.canvas = canvas;\n    cx = this.canvas.getContext(\"2d\");\n    this.camera = new Camera();\n  }\n\n  draw(d) {\n    cx.save();\n    d();\n    cx.restore();\n  }\n\n  clearBackground() {\n    cx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  drawBackground(color) {\n    cx.fillStyle = color;\n    cx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  rect({\n    rect,\n    fillColor,\n    strokeColor,\n    shadowBlur = 0,\n    shadowColor = \"none\",\n    lineWidth = 1,\n    adjusted = true,\n    rotation,\n    size,\n    crisp = true,\n  }) {\n    if (crisp) {\n      rect[0] = Math.floor(rect[0]);\n      rect[1] = Math.floor(rect[1]);\n    }\n    if (adjusted) {\n      rect[0] = this.camera.adjustX(rect[0], this.canvas.width);\n      rect[1] = this.camera.adjustY(rect[1], this.canvas.height);\n    }\n    if (rotation) {\n      cx.translate(rect[0] + size / 2, rect[1] + size / 2);\n      cx.rotate(rotation);\n      cx.translate(-1 * rect[0] - size / 2, -1 * rect[1] - size / 2);\n    }\n    cx.shadowBlur = shadowBlur;\n    cx.shadowColor = shadowColor;\n    if (fillColor) {\n      cx.fillStyle = fillColor;\n      cx.fillRect(...[rect[0], rect[1], ...rect.slice(2)]);\n    }\n    if (strokeColor) {\n      cx.strokeStyle = strokeColor;\n      cx.lineWidth = lineWidth;\n      cx.strokeRect(...[rect[0], rect[1], ...rect.slice(2)]);\n    }\n    cx.shadowBlur = 0;\n  }\n\n  arc({ arc, fillColor, strokeColor, shadowBlur, shadowColor }) {\n    cx.beginPath();\n    cx.arc(\n      this.camera.adjustX(arc[0], this.canvas.width),\n      this.camera.adjustY(arc[1], this.canvas.height),\n      ...arc.slice(2)\n    );\n    cx.shadowBlur = shadowBlur;\n    cx.shadowColor = shadowColor;\n    if (fillColor) {\n      cx.fillStyle = fillColor;\n      cx.fill();\n    }\n    if (strokeColor) {\n      cx.strokeStyle = strokeColor;\n      cx.stroke();\n    }\n    cx.shadowBlur = 0;\n  }\n\n  text({ text, x, y, fillColor = \"#fff\", size = 1 }) {\n    cx.fillStyle = fillColor;\n\n    let currX = 0;\n\n    text\n      .toUpperCase()\n      .split(\"\")\n      .map((c) => {\n        if (!letters[c]) console.log(c);\n        return letters[c];\n      })\n      .forEach((letter) => {\n        let currY = 0;\n        let addX = 0;\n        letter.forEach((row) => {\n          row.forEach((bit, i) => {\n            bit && cx.fillRect(currX + i * size + x, currY + y, size, size);\n          });\n          addX = Math.max(addX, row.length * size);\n          currY += size;\n        });\n        currX += size + addX;\n      });\n  }\n\n  lines({\n    lines,\n    shadowBlur = 0,\n    shadowColor,\n    rotation,\n    x,\n    y,\n    fillColor,\n    strokeColor,\n  }) {\n    if (rotation) {\n      cx.translate(\n        this.camera.adjustX(x, this.canvas.width),\n        this.camera.adjustY(y, this.canvas.height)\n      );\n      cx.rotate(rotation);\n      cx.translate(\n        -1 * this.camera.adjustX(x, this.canvas.width),\n        -1 * this.camera.adjustY(y, this.canvas.height)\n      );\n    }\n    cx.beginPath();\n    cx.moveTo(\n      this.camera.adjustX(lines[0][0], this.canvas.width),\n      this.camera.adjustY(lines[0][1], this.canvas.height)\n    );\n    lines\n      .slice(1)\n      .map((line) =>\n        cx.lineTo(\n          this.camera.adjustX(line[0], this.canvas.width),\n          this.camera.adjustY(line[1], this.canvas.height)\n        )\n      );\n    cx.closePath();\n    cx.shadowBlur = shadowBlur;\n    cx.shadowColor = shadowColor;\n    if (strokeColor) {\n      cx.strokeStyle = strokeColor;\n      cx.stroke();\n    }\n    if (fillColor) {\n      cx.fillStyle = fillColor;\n      cx.fill();\n    }\n  }\n\n  fill({\n    path,\n    x,\n    y,\n    fillColor,\n    strokeColor,\n    rotation,\n    adjusted = true,\n    centered = true,\n    size,\n  }) {\n    if (adjusted) {\n      x = this.camera.adjustX(x, this.canvas.width);\n      y = this.camera.adjustY(y, this.canvas.height);\n    }\n    if (rotation) {\n      cx.translate(x, y);\n      cx.rotate(rotation);\n      cx.translate(-1 * x, -1 * y);\n    }\n    cx.translate(x, y);\n    if (!centered) {\n      cx.translate(-size / 2, -size / 2 + 0.5);\n    }\n    if (fillColor) {\n      cx.fillStyle = fillColor;\n      cx.fill(path);\n    }\n    if (strokeColor) {\n      cx.strokeStyle = strokeColor;\n      cx.fillStyle = fillColor || \"#131\";\n      cx.fill(path);\n      cx.stroke(path);\n    }\n  }\n\n  emoji({ emoji, x, y, adjusted = true }) {\n    if (adjusted) {\n      x = this.camera.adjustX(x, this.canvas.width);\n      y = this.camera.adjustY(y, this.canvas.height);\n    }\n    cx.font = \"4px serif\";\n    cx.fillText(emoji, x, y);\n  }\n\n  hitbox({ x, y, size }) {\n    this.rect({\n      rect: [x - size / 2, y - size / 2, size, size],\n      color: \"#f00\",\n    });\n  }\n}\n\nconst letters = {\n  A: [\n    [, 1],\n    [1, , 1],\n    [1, , 1],\n    [1, 1, 1],\n    [1, , 1],\n  ],\n  B: [\n    [1, 1],\n    [1, , 1],\n    [1, 1, 1],\n    [1, , 1],\n    [1, 1],\n  ],\n  C: [[1, 1, 1], [1], [1], [1], [1, 1, 1]],\n  D: [\n    [1, 1],\n    [1, , 1],\n    [1, , 1],\n    [1, , 1],\n    [1, 1],\n  ],\n  E: [[1, 1, 1], [1], [1, 1, 1], [1], [1, 1, 1]],\n  F: [[1, 1, 1], [1], [1, 1], [1], [1]],\n  G: [[, 1, 1], [1], [1, , 1, 1], [1, , , 1], [, 1, 1]],\n  H: [\n    [1, , 1],\n    [1, , 1],\n    [1, 1, 1],\n    [1, , 1],\n    [1, , 1],\n  ],\n  I: [\n    [1, 1, 1],\n    [, 1],\n    [, 1],\n    [, 1],\n    [1, 1, 1],\n  ],\n  J: [\n    [1, 1, 1],\n    [, , 1],\n    [, , 1],\n    [1, , 1],\n    [1, 1, 1],\n  ],\n  K: [\n    [1, , , 1],\n    [1, , 1],\n    [1, 1],\n    [1, , 1],\n    [1, , , 1],\n  ],\n  L: [[1], [1], [1], [1], [1, 1, 1]],\n  M: [\n    [1, 1, 1, 1, 1],\n    [1, , 1, , 1],\n    [1, , 1, , 1],\n    [1, , , , 1],\n    [1, , , , 1],\n  ],\n  N: [\n    [1, , , 1],\n    [1, 1, , 1],\n    [1, , 1, 1],\n    [1, , , 1],\n    [1, , , 1],\n  ],\n  O: [\n    [1, 1, 1],\n    [1, , 1],\n    [1, , 1],\n    [1, , 1],\n    [1, 1, 1],\n  ],\n  P: [[1, 1, 1], [1, , 1], [1, 1, 1], [1], [1]],\n  Q: [\n    [0, 1, 1],\n    [1, , , 1],\n    [1, , , 1],\n    [1, , 1, 1],\n    [1, 1, 1, 1],\n  ],\n  R: [\n    [1, 1],\n    [1, , 1],\n    [1, , 1],\n    [1, 1],\n    [1, , 1],\n  ],\n  S: [[1, 1, 1], [1], [1, 1, 1], [, , 1], [1, 1, 1]],\n  T: [\n    [1, 1, 1],\n    [, 1],\n    [, 1],\n    [, 1],\n    [, 1],\n  ],\n  U: [\n    [1, , 1],\n    [1, , 1],\n    [1, , 1],\n    [1, , 1],\n    [1, 1, 1],\n  ],\n  V: [\n    [1, , , , 1],\n    [1, , , , 1],\n    [, 1, , 1],\n    [, 1, , 1],\n    [, , 1],\n  ],\n  W: [\n    [1, , , , 1],\n    [1, , , , 1],\n    [1, , , , 1],\n    [1, , 1, , 1],\n    [1, 1, 1, 1, 1],\n  ],\n  X: [\n    [1, , , , 1],\n    [, 1, , 1],\n    [, , 1],\n    [, 1, , 1],\n    [1, , , , 1],\n  ],\n  Y: [\n    [1, , 1],\n    [1, , 1],\n    [, 1],\n    [, 1],\n    [, 1],\n  ],\n  Z: [\n    [1, 1, 1, 1, 1],\n    [, , , 1],\n    [, , 1],\n    [, 1],\n    [1, 1, 1, 1, 1],\n  ],\n  \" \": [\n    [, ,],\n    [, ,],\n    [, ,],\n    [, ,],\n    [, ,],\n  ],\n  \"0\": [\n    [1, 1, 1],\n    [1, , 1],\n    [1, , 1],\n    [1, , 1],\n    [1, 1, 1],\n  ],\n  \"1\": [\n    [, 1],\n    [, 1],\n    [, 1],\n    [, 1],\n    [, 1],\n  ],\n  \"2\": [\n    [1, 1, 1],\n    [0, 0, 1],\n    [1, 1, 1],\n    [1, 0, 0],\n    [1, 1, 1],\n  ],\n  \"3\": [\n    [1, 1, 1],\n    [0, 0, 1],\n    [1, 1, 1],\n    [0, 0, 1],\n    [1, 1, 1],\n  ],\n  \"4\": [\n    [1, 0, 1],\n    [1, 0, 1],\n    [1, 1, 1],\n    [0, 0, 1],\n    [0, 0, 1],\n  ],\n  \"5\": [\n    [1, 1, 1],\n    [1, 0, 0],\n    [1, 1, 1],\n    [0, 0, 1],\n    [1, 1, 1],\n  ],\n  \"6\": [\n    [1, 1, 1],\n    [1, 0, 0],\n    [1, 1, 1],\n    [1, 0, 1],\n    [1, 1, 1],\n  ],\n  \"7\": [\n    [1, 1, 1],\n    [0, 0, 1],\n    [0, 0, 1],\n    [0, 0, 1],\n    [0, 0, 1],\n  ],\n  \"8\": [\n    [1, 1, 1],\n    [1, 0, 1],\n    [1, 1, 1],\n    [1, 0, 1],\n    [1, 1, 1],\n  ],\n  \"9\": [\n    [1, 1, 1],\n    [1, 0, 1],\n    [1, 1, 1],\n    [0, 0, 1],\n    [1, 1, 1],\n  ],\n};\n","import Character from \"./Character\";\nimport { humanoid } from \"./Sprites\";\n\nclass Enemy extends Character {\n  constructor(x, y, health, facing, colors, persona) {\n    super(x, y, health, facing);\n    this.colors = colors;\n    this.bloodColor = \"#32CD32\";\n    this.presses = {\n      left: false,\n      right: false,\n      up: false,\n      space: false,\n    };\n    this.persona = persona;\n  }\n\n  tick({ camera, map, projectiles }) {\n    const [presses, immobile] = this.persona({ enemy: this, map });\n    if (presses) this.presses = presses;\n    Character.tick.call(this, {\n      camera,\n      map,\n      projectiles,\n      presses: this.presses,\n      immobile,\n    });\n  }\n\n  draw(drawer) {\n    if (this.health < this.maxHealth) {\n      drawer.rect({\n        fillColor: \"white\",\n        rect: [this.x, this.y - 1, 8 * (this.health / this.maxHealth), 1],\n      });\n    }\n\n    humanoid(this.x, this.y, this.facing, this.colors).forEach(({ c, r }) =>\n      drawer.rect({ fillColor: c, rect: r })\n    );\n  }\n}\n\nexport default Enemy;\n","import Blood from \"./Blood\";\nimport BloodChunk from \"./BloodChunk\";\nimport Enemy from \"./Enemy\";\nimport { idiot, pacifist, sentinel } from \"./EnemyPersonas\";\n\nconst colors = {\n  skin: \"red\",\n  horns: \"red\",\n  eyes: \"yellow\",\n  body: \"orange\",\n};\n\nclass EnemyCollection {\n  constructor() {\n    this.enemies = [];\n    this.enemyCount = 0;\n  }\n\n  initialize({ concurrentEnemies, enemyCount }) {\n    this.concurrentEnemies = concurrentEnemies;\n    this.enemyCount = enemyCount;\n\n    for (let i = 0; i < concurrentEnemies; i++) {\n      this.enemies.push(\n        new Enemy(249, 20, 100, Math.random() > 0.5 ? 1 : -1, colors, pacifist)\n      );\n      this.enemyCount -= 1;\n    }\n  }\n\n  tick({ camera, map, projectiles, spurts, chunks }) {\n    this.enemies.forEach((enemy) => {\n      enemy.tick({ camera, map, projectiles });\n    });\n\n    this.enemies = this.enemies.reduce((enemies, enemy) => {\n      if (enemy.health <= 0) {\n        for (let i = 0; i < 100; i++) {\n          spurts.add(\n            new Blood(\n              enemy.x,\n              enemy.y,\n              Math.random() * 5 - 2.5,\n              Math.random() * 5 - 5,\n              enemy.bloodColor\n            )\n          );\n        }\n        for (let i = 0; i < 5; i++) {\n          chunks.chunks.push(\n            new BloodChunk(\n              enemy.x,\n              enemy.y - 2,\n              Math.random() * 3 - 1.5,\n              Math.random() * 3 - 1.5,\n              \"red\"\n            )\n          );\n        }\n        if (\n          this.enemies.length <= this.concurrentEnemies &&\n          this.enemyCount > 0\n        ) {\n          enemies.push(new Enemy(249, 20, 100, -1, colors, pacifist));\n          this.enemyCount -= 1;\n        }\n      } else {\n        enemies.push(enemy);\n      }\n      return enemies;\n    }, []);\n  }\n\n  draw(drawer) {\n    this.enemies.forEach((e) => e.draw(drawer));\n  }\n}\n\nexport default EnemyCollection;\n","export const pacifist = ({ enemy, map }) => {\n  if (!enemy.holdLeft && !enemy.holdRight) enemy.holdRight = true;\n\n  if (enemy.x < 8 * 2) {\n    enemy.holdLeft = false;\n    enemy.holdRight = true;\n  }\n\n  if (enemy.x > 8 * 36) {\n    enemy.holdLeft = true;\n    enemy.holdRight = false;\n  }\n\n  if (enemy.jumpTimer > 0) {\n    enemy.jumpTimer -= 1;\n  } else {\n    const jumpTarget = map.getTile(\n      enemy.x + 3 * 8 * enemy.facing,\n      enemy.y - 2 * 8\n    );\n    enemy.jumpTimer = jumpTarget && Math.random() < 0.2 ? 30 : 0;\n  }\n\n  const buttons = {\n    left: enemy.holdLeft,\n    right: enemy.holdRight,\n    up: enemy.jumpTimer > 0,\n  };\n\n  return [buttons, false];\n};\n\nexport const idiot = (enemy) => {\n  const immobile = false;\n  let buttons;\n  if (enemy.lifespan % 30 === 0) {\n    const left = Math.random() < 0.5;\n    buttons = {\n      left: left,\n      right: !left,\n      up: Math.random() < 0.5,\n      space: Math.random() < 0.7,\n    };\n  } else {\n    buttons = null;\n  }\n  return [buttons, immobile];\n};\n\nexport const sentinel = () => {\n  const immobile = true;\n  return [\n    {\n      left: false,\n      right: false,\n      up: false,\n      space: true,\n    },\n    immobile,\n  ];\n};\n","let canvas = document.getElementById(\"c\");\nexport default class GameContainer {\n  constructor() {\n    this.canvas = canvas;\n  }\n\n  initialize() {\n    let container = document.querySelector(\"body\");\n    let resize = e => {\n      container.clientWidth / container.clientHeight > 128 / 128\n        ? (canvas.style.height = \"100vh\") && (canvas.style.width = \"auto\")\n        : (canvas.style.height = \"auto\") && (canvas.style.width = \"100vw\");\n    };\n    resize();\n    container.onresize = resize;\n  }\n}\n\n","export default class GameObject {\n  constructor({ x, y, maxDx, maxDy, grav }) {\n    this.x = x;\n    this.y = y;\n    this.dx = 0;\n    this.dy = 0;\n    this.maxDx = maxDx;\n    this.maxDy = maxDy;\n    this.grav = grav;\n  }\n}\n","import { humanoid } from \"./Sprites\";\n\nclass HUD {\n  constructor() {}\n\n  tick(player, enemies) {\n    this.weapon = player.weapon.name;\n    this.health = player.health;\n    this.maxHealth = player.maxHealth;\n    this.enemyCount = enemies.enemyCount + enemies.enemies.length;\n  }\n\n  draw(drawer) {\n    drawer.text({\n      text: this.weapon,\n      size: 1,\n      x: 2,\n      y: 117,\n    });\n\n    const colors = {\n      skin: \"red\",\n      horns: \"red\",\n      eyes: \"yellow\",\n      body: \"orange\",\n    };\n\n    humanoid(113, 115, 1, colors, { bodyless: true }).forEach(({ c, r }) =>\n      drawer.rect({ adjusted: false, fillColor: c, rect: r })\n    );\n\n    drawer.text({\n      text: `${this.enemyCount}`,\n      size: 1,\n      x: 120,\n      y: 117,\n    });\n\n    drawer.rect({\n      adjusted: false,\n      fillColor: `rgb(${255 * (1 - this.health / this.maxHealth)}, ${\n        255 * (this.health / this.maxHealth)\n      }, 0)`,\n      rect: [2, 124, 124 * (this.health / this.maxHealth), 2],\n    });\n  }\n}\n\nexport default HUD;\n","class Keyboard {\n  constructor() {\n    document.addEventListener(\"keyup\", (event) => this.onKeyup(event));\n    document.addEventListener(\"keydown\", (event) => this.onKeydown(event));\n\n    this._pressed = {};\n\n    this.ENTER = [13];\n    this.SPACE = [32];\n    this.LEFT = [37, 65];\n    this.UP = [38, 87];\n    this.RIGHT = [39, 68];\n    this.DOWN = [40, 83];\n  }\n\n  isDown(keyCode) {\n    return keyCode.some((key) => this._pressed[key]) || false;\n  }\n\n  onKeydown(event) {\n    this._pressed[event.keyCode] = true;\n  }\n\n  onKeyup(event) {\n    delete this._pressed[event.keyCode];\n  }\n}\n\nexport default Keyboard;\n","const levelTemplates = [\n  {\n    concurrentEnemies: 5,\n    enemyCount: 10,\n    spawnPoint: [40, 10],\n  },\n];\n\nconst delay = 80;\n\nclass Level {\n  initializeLevel(level, { player, enemies, chunks, spurts }) {\n    this.level = levelTemplates[level] || levelTemplates[0];\n    this.level.level = level;\n    player.health = player.maxHealth;\n    player.x = this.level.spawnPoint[0];\n    player.y = this.level.spawnPoint[1];\n    chunks.chunks = [];\n    spurts.spurts = [];\n    enemies.initialize(this.level);\n    this.levelOverTimer = 0;\n    this.levelFadeIn = 0;\n  }\n\n  tick({ player, enemies, chunks, spurts }) {\n    this.levelFadeIn += 1;\n\n    if (enemies.enemies.length <= 0) {\n      this.levelOverTimer += 1;\n    }\n\n    if (this.levelOverTimer > delay * (6 + (this.level.level === 1 ? 3 : 0))) {\n      this.initializeLevel(this.level.level + 1, {\n        player,\n        enemies,\n        chunks,\n        spurts,\n      });\n    }\n  }\n\n  draw(drawer) {\n    if (this.levelOverTimer > delay) {\n      drawer.rect({\n        adjusted: false,\n        fillColor: \"rgba(0,0,0,0.9)\",\n        rect: [20, 20, 88, 42],\n      });\n    }\n\n    if (this.levelOverTimer > delay * 2) {\n      drawer.text({\n        text: `level ${this.level.level} complete`,\n        size: 1,\n        x: 32 - (this.level.level >= 10 ? 2 : 0),\n        y: 30,\n      });\n    }\n\n    if (this.levelOverTimer > delay * 3) {\n      drawer.text({\n        text: `${this.level.enemyCount} aliens defeated`,\n        size: 1,\n        x: 31 - (this.level.enemyCount >= 10 ? 2 : 0),\n        y: 45,\n      });\n    }\n\n    if (this.level.level === 1 && this.levelOverTimer > delay * 5) {\n      drawer.rect({\n        adjusted: false,\n        fillColor: \"#000\",\n        rect: [14, 68, 100, 42],\n      });\n      drawer.text({\n        text: \"Welcome\",\n        size: 2,\n        x: 32,\n        y: 74,\n      });\n      drawer.text({\n        text: \"to space\",\n        size: 2,\n        x: 33,\n        y: 94,\n      });\n    }\n\n    if (this.levelFadeIn < 200) {\n      drawer.rect({\n        adjusted: false,\n        fillColor: `rgba(0,0,0,${1 - this.levelFadeIn / 200})`,\n        rect: [0, 0, 128, 128],\n      });\n    }\n  }\n}\n\nexport default Level;\n","// prettier-ignore\nconst level1 = [\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1],\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n];\n\n// prettier-ignore\nconst level2 = [\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n];\n\n// prettier-ignore\nconst level3 = [\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n  [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n];\n\n// prettier-ignore\nconst level3Hex = [\n  \"ffffffffff\", \"8000000001\", \"8000000001\", \"8000000001\",\n  \"8000000001\", \"87007e00e1\", \"8000000001\", \"8000000001\",\n  \"f03c003c0f\", \"8000000001\", \"8000000001\", \"8300c300c1\",\n  \"8000000001\", \"8000000001\", \"8fc07e03f1\", \"8000000001\",\n  \"8000000001\", \"e00f00f007\", \"8000000001\", \"8000000001\",\n  \"ffffffffff\",\n];\n\n// quads are 10x12\n// prettier-ignore\nconst emptyQuad = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n];\n\nconst quad1 = [\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n];\n\nconst mapToHex = (map) => {\n  return map.map((r) => parseInt(r.join(\"\"), 2).toString(16));\n};\n\nconst hexToMap = (hex) => {\n  return hex.map((h) => {\n    return parseInt(h, 16).toString(2).split(\"\").map(Number);\n  });\n};\n\nexport default class Map {\n  constructor(level) {\n    this.drawer = null;\n    this.tileSize = 8;\n    this.mapTiles = [];\n    this.mapHeight = 0;\n    this.mapLength = 0;\n    const mapHex = mapToHex(level3);\n    const map = hexToMap(level3Hex);\n    this.loadLevel(map);\n    this.mapWidthPixels = this.tileSize * this.mapLength;\n    this.mapHeightPixels = this.tileSize * this.mapHeight;\n  }\n\n  loadLevel(tiles) {\n    this.mapTiles = tiles;\n    this.mapHeight = tiles.length;\n    this.mapLength = tiles[0].length;\n  }\n\n  getTile(x, y) {\n    const row = this.mapTiles[Math.floor(y / this.tileSize)];\n    if (!row) return 1;\n    return row[Math.floor(x / this.tileSize)];\n  }\n\n  draw(drawer) {\n    this.drawer = this.drawer || drawer;\n    this.mapTiles.forEach((row, y) => {\n      row.forEach((tile, x) => {\n        if (tile === 1) {\n          drawer.rect({\n            fillColor: \"darkblue\",\n            rect: [\n              x * this.tileSize,\n              y * this.tileSize,\n              this.tileSize,\n              this.tileSize,\n            ],\n          });\n        }\n      });\n    });\n  }\n}\n","// https://sb.bitsnbites.eu/?data=U0JveAwC7d1NbxtFGMDxZ3Z2Q4QbSpGCGokIS1VVEAcqgUQPrYrkHLkhTgj1wq2hEkkQDn1blcVms1FleeM4hDQBilAFR45IgHrjK3DiG3DhHmbWa0NNvCPRbGLD_7c7b35mrNn15jTaSTwrMifVaXk3FPVLKMb0cyZ76Cs999PyH-nUS36gPE8Z2leePUSeyEVRo9FsRlEcN5u2liS2FscN-UQi-VjKNuuIn3fER80_SWz7zh3H8DJVZhwdnnfEJ8FeXu7m5b283Pl8-7Ot7mbngCGHatQ9nukdlfkR8aq8KPMyd_K4n5-ZyuypgvApM8f3C-IP63klyst-e_GAzuMoajXaUauZRq24E7WS7vpW0o07SXdtM-4000bbNf64Ld2SW0vmHC5XQglXZGnVNR4AAAAAAAAAUJL9D5TsXxMl_tSZ3ifeU0qdeyOwVaXt4Q1q_TLNOqZ5-nv-12fjbPxnWGz4fg-1J_3yAAAAAAAAAAAAjsF6L130n1wwtR8CUb83pboYPO2LKOVpT5uK2NLTIkHGjusvzWzkZTpUlsn1PtYZR9xK86luPNI-mlW_Uueflr9q9rjzL32CDq75Lzji_XudZ-lw2zH8sbnm77r_AAAAAAAAAADgn7yfQ5PWnxG5urxm2p8Gypt-59kLG8Fb01o81dubcfioy2Rj_qU67YhfcMQBAAAAAAAAAACOnJbbohdui_q1Ii-IqNd85dWWb_xYmzqnTDhbI9Om0v_PZsq3hx05_G7ZUb5rdhj6uxpO4vwnYY4uBc_Pf-HyAAAAAAAAAADAhNFvhyJXwhMiJ6TW-8jbPynVN_Ur2drYYLXM01kpEviBvyPytch9-XLwPbuyZ1p7WbltUrkC1xZ1teJwK1uZ6Uh38Imtb5nUzdbRkoKx42AnP7eld25J7-xm19U2PbqSXYytt23WsqfJ7oq5uNj1_S6BI64d8fvm8fnG5KPKsrkenzlH_IF8K9-ZvF_uZU_-rtwzx479aY6X6_Icfx0AAAAAAAAAAPxPtddF_RZqkUtyWUR_Hyh99iupbeqznqh-J_u-We-tM79wweQjWZW6fFjUZexce-_RdtSqLx7c8_BUHLErBfF5k64XxI-CYwvG068Wx2u9HSbrI3eavJ7no67zZp7fHBF3Kbr_VtH9t1w7ZLp-n387bwAAAAAAAAAAUB5vbcWk0Bd5-fzVG1oSX-nXv9DV1F8drI8NFs8GNdfbNA8ccQAAAAAAAAAAAGCc_Ak\n\nimport Worker from \"./sound-box.worker.js\";\n\nfunction startMusic() {\n  var myWorker = new Worker();\n\n  myWorker.onmessage = function (e) {\n    let wave = e.data;\n    let audio = document.createElement(\"audio\");\n    audio.src = URL.createObjectURL(new Blob([wave], { type: \"audio/wav\" }));\n    audio.volume = 0.5;\n    audio.loop = true;\n    let playPromise = audio.play();\n    (function tryAgain(playPromise) {\n      playPromise\n        .then(_ => { })\n        .catch(error => {\n          setTimeout(() => {\n            let playPromise = audio.play();\n            tryAgain(playPromise);\n          }, 1000);\n        });\n    })(playPromise);\n  };\n}\n\nexport default class Music {\n  constructor() {\n    startMusic();\n  }\n}\n","import GameObject from \"./GameObject\";\nimport WeaponFactory from \"./WeaponFactory\";\n\nclass Package extends GameObject {\n  constructor(x, y) {\n    super({ x, y });\n\n    const weaponFactory = new WeaponFactory();\n    this.weapon = weaponFactory.random();\n    this.size = 5;\n    this.grav = 0.04;\n    this.dy = 0.4;\n    this.landed = false;\n  }\n\n  tick() {\n    if (this.landed) return;\n    this.dy += this.grav;\n    this.y += this.dy;\n  }\n\n  draw(drawer) {\n    drawer.rect({\n      fillColor: \"#C3732A\",\n      rect: [this.x, this.y, 5, 5],\n    });\n\n    [\n      [0, 1],\n      [1, 0],\n      [2, 0],\n      [3, 0],\n      [4, 1],\n      [3, 2],\n      [2, 2],\n      [2, 4],\n    ].forEach(([x, y]) =>\n      drawer.rect({\n        fillColor: \"yellow\",\n        rect: [this.x + x, this.y + y, 1, 1],\n      })\n    );\n  }\n}\n\nexport default Package;\n","import Package from \"./Package\";\n\nclass PackageCollection {\n  constructor() {\n    this.packages = [new Package(138, 20)];\n    this.lifespan = 0;\n  }\n\n  tick(map, level) {\n    if (level === 1) return;\n    this.lifespan += 1;\n    if (!(this.lifespan % 500)) {\n      let x = Math.random() * map.mapWidthPixels;\n      let y = Math.random() * map.mapHeightPixels;\n      while (map.getTile(x, y)) {\n        x = Math.random() * map.mapWidthPixels;\n        y = Math.random() * map.mapHeightPixels;\n      }\n      this.packages.push(new Package(x, y));\n    }\n    this.packages.forEach((p) => p.tick());\n  }\n\n  draw(drawer) {\n    this.packages.forEach((p) => p.draw(drawer));\n  }\n}\n\nexport default PackageCollection;\n","import Character from \"./Character\";\nimport { humanoid } from \"./Sprites.js\";\nimport WeaponFactory, { debugPistol } from \"./WeaponFactory\";\n\nexport default class Player extends Character {\n  constructor(x, y, health) {\n    super(x, y, health);\n    this.bloodColor = \"red\";\n    this.weapon = new WeaponFactory().create(debugPistol);\n  }\n\n  tick({ camera, keyboard, map, projectiles }) {\n    Character.tick.call(this, {\n      camera,\n      map,\n      projectiles,\n      presses: {\n        left: keyboard.isDown(keyboard.LEFT),\n        right: keyboard.isDown(keyboard.RIGHT),\n        up: keyboard.isDown(keyboard.UP),\n        space: keyboard.isDown(keyboard.SPACE),\n      },\n    });\n  }\n\n  draw(drawer) {\n    // drawer.rect({ fillColor: \"green\", rect: [this.x, this.y, 8, 8] }); // hitbox\n\n    const colors = {\n      skin: \"#FFCCAA\",\n      hair: \"#FFA300\",\n      eyes: \"#008751\",\n      body: \"#29ADFF\",\n    };\n\n    humanoid(this.x, this.y, this.facing, colors).forEach(({ c, r }) =>\n      drawer.rect({ fillColor: c, rect: r })\n    );\n  }\n}\n","class Projectile {\n  constructor(\n    { x, y, facing },\n    {\n      color,\n      speed,\n      spreadX = 0,\n      spreadY = 0,\n      lift = 0,\n      grav = 0,\n      damage,\n      damageMod,\n      explosion,\n      blood,\n      size,\n      emoji,\n    }\n  ) {\n    this.size = size || 1;\n    this.x = x - this.size / 2;\n    this.y = y;\n    this.dx = facing * speed + (Math.random() - spreadX / 2) * spreadX;\n    this.dy = (Math.random() - spreadY / 2) * spreadY - lift;\n    this.grav = grav;\n    this.color = color;\n    this.explosion = explosion || 1;\n    this.lifespan = 0;\n    this.shouldDie = false;\n    this.exploding = false;\n    this.lifeleft = null;\n    this.damage = damage;\n    this.damageMod = damageMod || 1;\n    this.blood = blood;\n    this.emoji = emoji;\n  }\n\n  destroy() {\n    this.exploding = true;\n    this.lifeleft = 2;\n  }\n\n  tick() {\n    this.lifespan += 1;\n    if (this.lifeleft) {\n      this.lifeleft -= 1;\n      if (this.lifeleft === 0) this.shouldDie = true;\n    }\n    if (this.exploding) return;\n\n    this.x += this.dx;\n    this.dy += this.grav;\n    this.y += this.dy;\n  }\n\n  draw(drawer) {\n    if (this.exploding) {\n      drawer.arc({\n        arc: [\n          this.x,\n          this.y,\n          (2 / this.lifeleft) * this.explosion,\n          0,\n          2 * Math.PI,\n        ],\n        fillColor: \"#ff8\",\n        shadowBlur: 10,\n        shadowColor: \"#ff0\",\n      });\n    } else {\n      if (this.emoji) {\n        drawer.emoji({ x: this.x, y: this.y, emoji: this.emoji });\n      } else if (this.size === 1) {\n        drawer.rect({\n          fillColor: this.color(),\n          rect: [this.x, this.y, this.size, this.size],\n        });\n      } else {\n        drawer.arc({\n          arc: [this.x, this.y, this.size, 0, 2 * Math.PI],\n          fillColor: this.color(),\n          shadowBlur: this.size,\n          shadowColor: \"#ff0\",\n        });\n      }\n    }\n  }\n}\n\nexport default Projectile;\n","class ProjectileCollection {\n  constructor() {\n    this.projectiles = [];\n  }\n\n  add(p) {\n    this.projectiles.push(p);\n  }\n\n  tick() {\n    this.projectiles.map((p) => p.tick());\n    this.projectiles = this.projectiles.filter((p) => !p.shouldDie);\n  }\n\n  draw(drawer) {\n    this.projectiles.map((p) => p.draw(drawer));\n  }\n}\n\nexport default ProjectileCollection;\n","import jsfxr from \"jsfxr\";\n\nexport default class Sound {\n  constructor() {\n    this.state = {\n      engine: false\n    };\n  }\n\n  engineOn() { }\n\n  engineOff() { }\n\n  playSound(url) {\n    let soundUrl = jsfxr(url);\n\n    let player = new Audio();\n    player.src = soundUrl;\n    player.play();\n  }\n\n  mainLaser() {\n    this.playSound(\n      [2,,0.1749,,0.3063,0.713,0.2,-0.2645,,,,,,0.0543,0.1546,,,,1,,,,,0.5]\n    );\n  }\n\n  secondaryLaser() {\n    this.playSound(\n      [2,,0.1426,,0.2251,0.7799,0.2555,-0.2285,,,,,,0.7631,-0.4501,,,,1,,,0.0846,,0.5]\n    );\n  }\n\n  missile() {\n    this.playSound([3,,0.0937,0.571,0.3803,0.7495,,,,,,,,,,,,,1,,,,,0.5]);\n  }\n\n  projectileHit() {\n    this.playSound([3,,0.0867,,0.2283,0.2711,,-0.6853,,,,,,,,,,,1,,,,,0.5]);\n  }\n\n  enemyLaser() {\n    this.playSound(\n      [0,,0.2934,0.1381,0.2143,0.6919,0.3422,-0.2379,,,,,,0.4281,-0.6711,,,,1,,,0.194,,0.5]\n    );\n  }\n}\n\n","export const humanoid = (x, y, facing, colors, options = {}) => {\n  const { skin, hair, horns, eyes, body } = colors;\n  let parts = [];\n\n  let upper = [\n    [skin, [1, 3, 5, 3]], // head\n    [eyes, [2, 4, 1, 1]], // eye left\n    [eyes, [5, 4, 1, 1]], // eye right\n  ];\n  parts = parts.concat(upper);\n\n  let lower = [\n    [body, [1, 7, 3, 1]], // body\n    [skin, [1, 7, 1, 1]], // left arm\n    [skin, [4, 7, 1, 1]], // right arm\n  ];\n\n  if (!options.bodyless) {\n    parts = parts.concat(lower);\n  }\n\n  if (hair)\n    parts = parts.concat([\n      [hair, [2, 1, 4, 1]], // hair top\n      [hair, [1, 2, 6, 1]], // hair bottom\n    ]);\n\n  if (horns)\n    parts = parts.concat([\n      [horns, [1, 2, 1, 1]], // horn left\n      [horns, [5, 2, 1, 1]], // horn right\n    ]);\n\n  parts = parts.map(([c, r]) => ({\n    c,\n    r: [facing === 1 ? x + r[0] : 8 - (r[0] + r[2]) + x, y + r[1], r[2], r[3]],\n  }));\n\n  return parts;\n};\n","import Projectile from \"./Projectile\";\n\nclass Weapon {\n  constructor({\n    name,\n    cooldown,\n    cooldownMod = 1,\n    payloadCount,\n    knockback,\n    shake,\n    projectileConfig,\n  }) {\n    this.name = name;\n    this.cooldown = cooldown;\n    this.cooldownMod = cooldownMod;\n    this.payloadCount = payloadCount;\n    this.knockback = knockback;\n    this.shake = shake;\n    this.projectileConfig = projectileConfig;\n\n    this.ticksSinceLastFired = cooldown;\n  }\n\n  tick(pressSpace, projectiles, location, camera) {\n    this.ticksSinceLastFired += 1;\n    if (\n      this.cooldown * this.cooldownMod < this.ticksSinceLastFired &&\n      pressSpace\n    ) {\n      this.fire(projectiles, location);\n      if (this.shake) camera.shake(this.shake.force, this.shake.duration);\n      return this.knockback;\n    }\n    return 0;\n  }\n\n  fire(projectiles, location) {\n    this.ticksSinceLastFired = 0;\n    for (let i = 0; i < this.payloadCount; i++) {\n      const p = new Projectile(location, this.projectileConfig);\n      projectiles.add(p);\n    }\n  }\n}\n\nexport default Weapon;\n","import Weapon from \"./Weapon\";\n\n// base weapons\nexport const debugPistol = {\n  name: \"Debug Pistol\",\n  cooldown: 2,\n  payloadCount: 1,\n  knockback: 0,\n  projectileConfig: {\n    color: () => \"#eee\",\n    speed: 3,\n    spreadX: 0,\n    spreadY: 0.15,\n    damage: 100,\n    blood: 5,\n  },\n};\n\nexport const pistol = {\n  name: \"Pistol\",\n  cooldown: 10,\n  payloadCount: 1,\n  knockback: 0,\n  projectileConfig: {\n    color: () => \"#eee\",\n    speed: 3,\n    spreadX: 0,\n    spreadY: 0.15,\n    damage: 10,\n    blood: 5,\n  },\n};\n\nexport const minigun = {\n  name: \"Minigun\",\n  cooldown: 2,\n  payloadCount: 1,\n  knockback: 0.5,\n  shake: { force: 1, duration: 1 },\n  projectileConfig: {\n    color: () => \"#fff\",\n    speed: 4,\n    spreadX: 1,\n    spreadY: 0.3,\n    damage: 2,\n    blood: 5,\n  },\n};\n\nconst assaultRifle = {\n  name: \"Assault Rifle\",\n  cooldown: 8,\n  payloadCount: 1,\n  knockback: 0.1,\n  projectileConfig: {\n    color: () => \"#fff\",\n    speed: 3,\n    spreadX: 0,\n    spreadY: 0.3,\n    damage: 4,\n    blood: 5,\n  },\n};\n\nexport const shotgun = {\n  name: \"Shotgun\",\n  cooldown: 40,\n  payloadCount: 12,\n  knockback: 2,\n  shake: { force: 2, duration: 8 },\n  projectileConfig: {\n    color: () => \"yellow\",\n    speed: 4,\n    spreadX: 0.7,\n    spreadY: 1,\n    damage: 1,\n    blood: 5,\n  },\n};\n\nconst superShotgun = {};\nconst sniperRifle = {};\nconst flameThrower = {};\n\nconst grenade = {\n  name: \"Grenade\",\n  cooldown: 40,\n  payloadCount: 1,\n  knockback: 0,\n  projectileConfig: {\n    emoji: \"💣\",\n    speed: 2,\n    lift: 4,\n    grav: 0.3,\n    explosion: 3,\n    size: 3,\n    damage: 20,\n    blood: 5,\n  },\n};\n\n// cooldown\nconst slowCooldown = { cooldown: 2, damage: 2 };\nconst fastCooldown = { cooldown: 0.5, damage: 0.5 };\n\nconst knockback = { knockback: 1 };\n\nconst sniper = { cooldown: 3, damage: 5, speed: 2 };\n\n// attributes\nconst rainbow = {\n  prefix: \"Rainbow\",\n  projectileConfig: {\n    color: () =>\n      [\"#FF0000\", \"#FFAC00\", \"#FFF100\", \"#0BFF00\", \"#00F6FF\"][\n        Math.floor(Math.random() * 6)\n      ],\n  },\n};\n\nconst collosal = {\n  prefix: \"Collosal\",\n  cooldownMod: 3,\n  projectileConfig: {\n    color: () => \"yellow\",\n    damageMod: 3,\n    explosion: 5,\n    size: 5,\n  },\n};\n\nconst shrimp = {\n  prefix: \"Shrimp\",\n  projectileConfig: { emoji: \"🍤\", explosion: 3, size: 3 },\n};\nconst bomb = {\n  prefix: \"Bomb\",\n  projectileConfig: { emoji: \"💣\", explosion: 3, size: 3 },\n};\n\nconst attributes = [rainbow, collosal, shrimp, bomb];\nconst randomAttribute = () =>\n  attributes[Math.floor(Math.random() * attributes.length)];\n\nclass WeaponFactory {\n  constructor() {}\n\n  create(base) {\n    const attribute =\n      Math.random() > 0.9 ? randomAttribute() : { projectileConfig: {} };\n    const projectileConfig = {\n      ...base.projectileConfig,\n      ...attribute.projectileConfig,\n    };\n    const final = {\n      ...base,\n      ...attribute,\n      projectileConfig,\n      name: `${attribute.prefix ? `${attribute.prefix} ` : \"\"}${base.name}`,\n    };\n    return new Weapon(final);\n  }\n\n  random() {\n    const guns = [pistol, assaultRifle, minigun, shotgun, grenade];\n    const base = guns[Math.floor(Math.random() * guns.length)];\n    return this.create(base);\n  }\n}\n\nexport default WeaponFactory;\n","import Drawer from \"./Drawer\";\nimport GameContainer from \"./GameContainer\";\nimport Keyboard from \"./Keyboard\";\nimport Sound from \"./Sound\";\nimport Music from \"./Music\";\nimport CollisionDetector from \"./CollisionDetector\";\n\nimport Background from \"./Background\";\nimport Level from \"./Level\";\nimport Map from \"./Map\";\nimport HUD from \"./HUD\";\nimport Player from \"./Player\";\nimport EnemyCollection from \"./EnemyCollection\";\nimport ProjectileCollection from \"./ProjectileCollection\";\nimport BloodCollection from \"./BloodCollection\";\nimport PackageCollection from \"./PackageCollection\";\n\nwindow.onload = () => {\n  let gameContainer = new GameContainer();\n\n  let drawer = new Drawer(gameContainer.canvas);\n  let keyboard = new Keyboard();\n  let sound = new Sound();\n  let collisionDetector = new CollisionDetector();\n\n  let background = new Background({\n    cw: gameContainer.canvas.width,\n    ch: gameContainer.canvas.height,\n  });\n\n  let level = new Level();\n  let map = new Map(level.level);\n  let hud = new HUD();\n  // let music = new Music();\n  let player = new Player(10, 10, 1000);\n  let enemies = new EnemyCollection();\n  let projectiles = new ProjectileCollection();\n  let spurts = new BloodCollection();\n  let chunks = { chunks: [] };\n  let packages = new PackageCollection();\n\n  gameContainer.initialize();\n  level.initializeLevel(1, { player, enemies, chunks, spurts });\n\n  let fps = 60,\n    interval = 1000 / fps,\n    lastTime = new Date().getTime(),\n    currentTime = 0,\n    delta = 0;\n\n  let gameLoop = () => {\n    tick();\n    collisionDetection();\n    draw();\n  };\n\n  let tick = () => {\n    const { camera } = drawer;\n    level.tick({ player, enemies, chunks, spurts });\n    player.tick({ camera, keyboard, map, projectiles });\n    enemies.tick({ camera, map, projectiles, spurts, chunks });\n    camera.tick({ player, map });\n    projectiles.tick();\n    spurts.tick();\n\n    if (chunks.chunks.length > 1000) {\n      chunks.chunks = chunks.chunks.slice(chunks.chunks.length - 1000);\n    }\n    chunks.chunks.forEach((chunk) => chunk.tick());\n\n    hud.tick(player, enemies);\n    packages.tick(map);\n  };\n\n  let collisionDetection = () => {\n    projectiles.projectiles\n      .filter((p) => !p.exploding && p.lifespan > 2)\n      .forEach((projectile) => {\n        // map\n        if (map.getTile(projectile.x, projectile.y)) {\n          projectile.destroy();\n        }\n\n        // characters\n        enemies.enemies.concat([player]).forEach((object) => {\n          collisionDetector.handleProjectile(projectile, object, spurts);\n        });\n      });\n\n    spurts.spurts.concat(chunks.chunks).forEach((item) => {\n      if (map.getTile(item.x, item.y)) item.stick();\n    });\n\n    packages.packages.forEach((packge) => {\n      // map\n      if (map.getTile(packge.x, packge.y + packge.size)) {\n        packge.landed = true;\n      }\n\n      // characters\n      enemies.enemies.concat([player]).forEach((object) => {\n        collisionDetector.handlePackage(packge, object, packages);\n      });\n    });\n  };\n\n  let draw = () => {\n    window.requestAnimationFrame(gameLoop);\n\n    currentTime = new Date().getTime();\n    delta = currentTime - lastTime;\n\n    if (delta > interval) {\n      drawer.clearBackground();\n      drawObjects().map((object) => object.draw(drawer));\n      lastTime = currentTime - (delta % interval);\n    }\n  };\n\n  let drawObjects = () => [\n    background,\n    map,\n    enemies,\n    player,\n    packages,\n    projectiles,\n    spurts,\n    ...chunks.chunks,\n    hud,\n    level,\n  ];\n\n  document.querySelector(\"main\").className += \" loaded\";\n  gameLoop();\n};\n","module.exports = function() {\n  return require(\"!!/Users/matthewdiamant/Projects/space/node_modules/worker-loader/dist/workers/InlineWorker.js\")(\"/******/ (function(modules) { // webpackBootstrap\\n/******/ \\t// The module cache\\n/******/ \\tvar installedModules = {};\\n/******/\\n/******/ \\t// The require function\\n/******/ \\tfunction __webpack_require__(moduleId) {\\n/******/\\n/******/ \\t\\t// Check if module is in cache\\n/******/ \\t\\tif(installedModules[moduleId]) {\\n/******/ \\t\\t\\treturn installedModules[moduleId].exports;\\n/******/ \\t\\t}\\n/******/ \\t\\t// Create a new module (and put it into the cache)\\n/******/ \\t\\tvar module = installedModules[moduleId] = {\\n/******/ \\t\\t\\ti: moduleId,\\n/******/ \\t\\t\\tl: false,\\n/******/ \\t\\t\\texports: {}\\n/******/ \\t\\t};\\n/******/\\n/******/ \\t\\t// Execute the module function\\n/******/ \\t\\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n/******/\\n/******/ \\t\\t// Flag the module as loaded\\n/******/ \\t\\tmodule.l = true;\\n/******/\\n/******/ \\t\\t// Return the exports of the module\\n/******/ \\t\\treturn module.exports;\\n/******/ \\t}\\n/******/\\n/******/\\n/******/ \\t// expose the modules object (__webpack_modules__)\\n/******/ \\t__webpack_require__.m = modules;\\n/******/\\n/******/ \\t// expose the module cache\\n/******/ \\t__webpack_require__.c = installedModules;\\n/******/\\n/******/ \\t// define getter function for harmony exports\\n/******/ \\t__webpack_require__.d = function(exports, name, getter) {\\n/******/ \\t\\tif(!__webpack_require__.o(exports, name)) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\\n/******/ \\t\\t}\\n/******/ \\t};\\n/******/\\n/******/ \\t// define __esModule on exports\\n/******/ \\t__webpack_require__.r = function(exports) {\\n/******/ \\t\\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n/******/ \\t\\t\\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\\n/******/ \\t\\t}\\n/******/ \\t\\tObject.defineProperty(exports, '__esModule', { value: true });\\n/******/ \\t};\\n/******/\\n/******/ \\t// create a fake namespace object\\n/******/ \\t// mode & 1: value is a module id, require it\\n/******/ \\t// mode & 2: merge all properties of value into the ns\\n/******/ \\t// mode & 4: return value when already ns object\\n/******/ \\t// mode & 8|1: behave like require\\n/******/ \\t__webpack_require__.t = function(value, mode) {\\n/******/ \\t\\tif(mode & 1) value = __webpack_require__(value);\\n/******/ \\t\\tif(mode & 8) return value;\\n/******/ \\t\\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\\n/******/ \\t\\tvar ns = Object.create(null);\\n/******/ \\t\\t__webpack_require__.r(ns);\\n/******/ \\t\\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\\n/******/ \\t\\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\\n/******/ \\t\\treturn ns;\\n/******/ \\t};\\n/******/\\n/******/ \\t// getDefaultExport function for compatibility with non-harmony modules\\n/******/ \\t__webpack_require__.n = function(module) {\\n/******/ \\t\\tvar getter = module && module.__esModule ?\\n/******/ \\t\\t\\tfunction getDefault() { return module['default']; } :\\n/******/ \\t\\t\\tfunction getModuleExports() { return module; };\\n/******/ \\t\\t__webpack_require__.d(getter, 'a', getter);\\n/******/ \\t\\treturn getter;\\n/******/ \\t};\\n/******/\\n/******/ \\t// Object.prototype.hasOwnProperty.call\\n/******/ \\t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\\n/******/\\n/******/ \\t// __webpack_public_path__\\n/******/ \\t__webpack_require__.p = \\\"\\\";\\n/******/\\n/******/\\n/******/ \\t// Load entry module and return exports\\n/******/ \\treturn __webpack_require__(__webpack_require__.s = \\\"./src/sound-box.worker.js\\\");\\n/******/ })\\n/************************************************************************/\\n/******/ ({\\n\\n/***/ \\\"./src/sound-box.worker.js\\\":\\n/*!*********************************!*\\\\\\n  !*** ./src/sound-box.worker.js ***!\\n  \\\\*********************************/\\n/*! exports provided: default */\\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\\n\\n\\\"use strict\\\";\\n__webpack_require__.r(__webpack_exports__);\\n/* -*- mode: javascript; tab-width: 4; indent-tabs-mode: nil; -*-\\n *\\n * Copyright (c) 2011-2013 Marcus Geelnard\\n *\\n * This software is provided 'as-is', without any express or implied\\n * warranty. In no event will the authors be held liable for any damages\\n * arising from the use of this software.\\n *\\n * Permission is granted to anyone to use this software for any purpose,\\n * including commercial applications, and to alter it and redistribute it\\n * freely, subject to the following restrictions:\\n *\\n * 1. The origin of this software must not be misrepresented; you must not\\n *    claim that you wrote the original software. If you use this software\\n *    in a product, an acknowledgment in the product documentation would be\\n *    appreciated but is not required.\\n *\\n * 2. Altered source versions must be plainly marked as such, and must not be\\n *    misrepresented as being the original software.\\n *\\n * 3. This notice may not be removed or altered from any source\\n *    distribution.\\n *\\n */\\n\\n\\n\\nlet Soundbox = function () {\\n  //--------------------------------------------------------------------------\\n  // Private methods\\n  //--------------------------------------------------------------------------\\n\\n  // Oscillators\\n  var osc_sin = function (value) {\\n    return Math.sin(value * 6.283184);\\n  };\\n\\n  var osc_saw = function (value) {\\n    return 2 * (value % 1) - 1;\\n  };\\n\\n  var osc_square = function (value) {\\n    return value % 1 < 0.5 ? 1 : -1;\\n  };\\n\\n  var osc_tri = function (value) {\\n    var v2 = (value % 1) * 4;\\n    if (v2 < 2) return v2 - 1;\\n    return 3 - v2;\\n  };\\n\\n  var getnotefreq = function (n) {\\n    // 174.61.. / 44100 = 0.003959503758 (F3)\\n    return 0.003959503758 * Math.pow(2, (n - 128) / 12);\\n  };\\n\\n  var createNote = function (instr, n, rowLen) {\\n    var osc1 = mOscillators[instr.i[0]],\\n      o1vol = instr.i[1],\\n      o1xenv = instr.i[3],\\n      osc2 = mOscillators[instr.i[4]],\\n      o2vol = instr.i[5],\\n      o2xenv = instr.i[8],\\n      noiseVol = instr.i[9],\\n      attack = instr.i[10] * instr.i[10] * 4,\\n      sustain = instr.i[11] * instr.i[11] * 4,\\n      release = instr.i[12] * instr.i[12] * 4,\\n      releaseInv = 1 / release,\\n      arp = instr.i[13],\\n      arpInterval = rowLen * Math.pow(2, 2 - instr.i[14]);\\n\\n    var noteBuf = new Int32Array(attack + sustain + release);\\n\\n    // Re-trig oscillators\\n    var c1 = 0,\\n      c2 = 0;\\n\\n    // Local variables.\\n    var j, j2, e, t, rsample, o1t, o2t;\\n\\n    // Generate one note (attack + sustain + release)\\n    for (j = 0, j2 = 0; j < attack + sustain + release; j++ , j2++) {\\n      if (j2 >= 0) {\\n        // Switch arpeggio note.\\n        arp = (arp >> 8) | ((arp & 255) << 4);\\n        j2 -= arpInterval;\\n\\n        // Calculate note frequencies for the oscillators\\n        o1t = getnotefreq(n + (arp & 15) + instr.i[2] - 128);\\n        o2t =\\n          getnotefreq(n + (arp & 15) + instr.i[6] - 128) *\\n          (1 + 0.0008 * instr.i[7]);\\n      }\\n\\n      // Envelope\\n      e = 1;\\n      if (j < attack) {\\n        e = j / attack;\\n      } else if (j >= attack + sustain) {\\n        e -= (j - attack - sustain) * releaseInv;\\n      }\\n\\n      // Oscillator 1\\n      t = o1t;\\n      if (o1xenv) {\\n        t *= e * e;\\n      }\\n      c1 += t;\\n      rsample = osc1(c1) * o1vol;\\n\\n      // Oscillator 2\\n      t = o2t;\\n      if (o2xenv) {\\n        t *= e * e;\\n      }\\n      c2 += t;\\n      rsample += osc2(c2) * o2vol;\\n\\n      // Noise oscillator\\n      if (noiseVol) {\\n        rsample += (2 * Math.random() - 1) * noiseVol;\\n      }\\n\\n      // Add to (mono) channel buffer\\n      noteBuf[j] = (80 * rsample * e) | 0;\\n    }\\n\\n    return noteBuf;\\n  };\\n\\n  //--------------------------------------------------------------------------\\n  // Private members\\n  //--------------------------------------------------------------------------\\n\\n  // Array of oscillator functions\\n  var mOscillators = [osc_sin, osc_square, osc_saw, osc_tri];\\n\\n  // Private variables set up by init()\\n  var mSong, mLastRow, mCurrentCol, mNumWords, mMixBuf;\\n\\n  //--------------------------------------------------------------------------\\n  // Initialization\\n  //--------------------------------------------------------------------------\\n\\n  this.init = function (song) {\\n    // Define the song\\n    mSong = song;\\n\\n    // Init iteration state variables\\n    mLastRow = song.endPattern;\\n    mCurrentCol = 0;\\n\\n    // Prepare song info\\n    mNumWords = song.rowLen * song.patternLen * (mLastRow + 1) * 2;\\n\\n    // Create work buffer (initially cleared)\\n    mMixBuf = new Int32Array(mNumWords);\\n  };\\n\\n  //--------------------------------------------------------------------------\\n  // Public methods\\n  //--------------------------------------------------------------------------\\n\\n  // Generate audio data for a single track\\n  this.generate = function () {\\n    // Local variables\\n    var i,\\n      j,\\n      b,\\n      p,\\n      row,\\n      col,\\n      n,\\n      cp,\\n      k,\\n      t,\\n      lfor,\\n      e,\\n      x,\\n      rsample,\\n      rowStartSample,\\n      f,\\n      da;\\n\\n    // Put performance critical items in local variables\\n    var chnBuf = new Int32Array(mNumWords),\\n      instr = mSong.songData[mCurrentCol],\\n      rowLen = mSong.rowLen,\\n      patternLen = mSong.patternLen;\\n\\n    // Clear effect state\\n    var low = 0,\\n      band = 0,\\n      high;\\n    var lsample,\\n      filterActive = false;\\n\\n    // Clear note cache.\\n    var noteCache = [];\\n\\n    // Patterns\\n    for (p = 0; p <= mLastRow; ++p) {\\n      cp = instr.p[p];\\n\\n      // Pattern rows\\n      for (row = 0; row < patternLen; ++row) {\\n        // Execute effect command.\\n        var cmdNo = cp ? instr.c[cp - 1].f[row] : 0;\\n        if (cmdNo) {\\n          instr.i[cmdNo - 1] = instr.c[cp - 1].f[row + patternLen] || 0;\\n\\n          // Clear the note cache since the instrument has changed.\\n          if (cmdNo < 16) {\\n            noteCache = [];\\n          }\\n        }\\n\\n        // Put performance critical instrument properties in local variables\\n        var oscLFO = mOscillators[instr.i[15]],\\n          lfoAmt = instr.i[16] / 512,\\n          lfoFreq = Math.pow(2, instr.i[17] - 9) / rowLen,\\n          fxLFO = instr.i[18],\\n          fxFilter = instr.i[19],\\n          fxFreq = (instr.i[20] * 43.23529 * 3.141592) / 44100,\\n          q = 1 - instr.i[21] / 255,\\n          dist = instr.i[22] * 1e-5,\\n          drive = instr.i[23] / 32,\\n          panAmt = instr.i[24] / 512,\\n          panFreq = (6.283184 * Math.pow(2, instr.i[25] - 9)) / rowLen,\\n          dlyAmt = instr.i[26] / 255,\\n          dly = (instr.i[27] * rowLen) & ~1; // Must be an even number\\n\\n        // Calculate start sample number for this row in the pattern\\n        rowStartSample = (p * patternLen + row) * rowLen;\\n\\n        // Generate notes for this pattern row\\n        for (col = 0; col < 4; ++col) {\\n          n = cp ? instr.c[cp - 1].n[row + col * patternLen] : 0;\\n          if (n) {\\n            if (!noteCache[n]) {\\n              noteCache[n] = createNote(instr, n, rowLen);\\n            }\\n\\n            // Copy note from the note cache\\n            var noteBuf = noteCache[n];\\n            for (\\n              j = 0, i = rowStartSample * 2;\\n              j < noteBuf.length;\\n              j++ , i += 2\\n            ) {\\n              chnBuf[i] += noteBuf[j];\\n            }\\n          }\\n        }\\n\\n        // Perform effects for this pattern row\\n        for (j = 0; j < rowLen; j++) {\\n          // Dry mono-sample\\n          k = (rowStartSample + j) * 2;\\n          rsample = chnBuf[k];\\n\\n          // We only do effects if we have some sound input\\n          if (rsample || filterActive) {\\n            // State variable filter\\n            f = fxFreq;\\n            if (fxLFO) {\\n              f *= oscLFO(lfoFreq * k) * lfoAmt + 0.5;\\n            }\\n            f = 1.5 * Math.sin(f);\\n            low += f * band;\\n            high = q * (rsample - band) - low;\\n            band += f * high;\\n            rsample = fxFilter == 3 ? band : fxFilter == 1 ? high : low;\\n\\n            // Distortion\\n            if (dist) {\\n              rsample *= dist;\\n              rsample =\\n                rsample < 1 ? (rsample > -1 ? osc_sin(rsample * 0.25) : -1) : 1;\\n              rsample /= dist;\\n            }\\n\\n            // Drive\\n            rsample *= drive;\\n\\n            // Is the filter active (i.e. still audiable)?\\n            filterActive = rsample * rsample > 1e-5;\\n\\n            // Panning\\n            t = Math.sin(panFreq * k) * panAmt + 0.5;\\n            lsample = rsample * (1 - t);\\n            rsample *= t;\\n          } else {\\n            lsample = 0;\\n          }\\n\\n          // Delay is always done, since it does not need sound input\\n          if (k >= dly) {\\n            // Left channel = left + right[-p] * t\\n            lsample += chnBuf[k - dly + 1] * dlyAmt;\\n\\n            // Right channel = right + left[-p] * t\\n            rsample += chnBuf[k - dly] * dlyAmt;\\n          }\\n\\n          // Store in stereo channel buffer (needed for the delay effect)\\n          chnBuf[k] = lsample | 0;\\n          chnBuf[k + 1] = rsample | 0;\\n\\n          // ...and add to stereo mix buffer\\n          mMixBuf[k] += lsample | 0;\\n          mMixBuf[k + 1] += rsample | 0;\\n        }\\n      }\\n    }\\n\\n    // Next iteration. Return progress (1.0 == done!).\\n    mCurrentCol++;\\n    return mCurrentCol / mSong.numChannels;\\n  };\\n\\n  // Create a WAVE formatted Uint8Array from the generated audio data\\n  this.createWave = function () {\\n    // Create WAVE header\\n    var headerLen = 44;\\n    var l1 = headerLen + mNumWords * 2 - 8;\\n    var l2 = l1 - 36;\\n    var wave = new Uint8Array(headerLen + mNumWords * 2);\\n    wave.set([\\n      82,\\n      73,\\n      70,\\n      70,\\n      l1 & 255,\\n      (l1 >> 8) & 255,\\n      (l1 >> 16) & 255,\\n      (l1 >> 24) & 255,\\n      87,\\n      65,\\n      86,\\n      69,\\n      102,\\n      109,\\n      116,\\n      32,\\n      16,\\n      0,\\n      0,\\n      0,\\n      1,\\n      0,\\n      2,\\n      0,\\n      68,\\n      172,\\n      0,\\n      0,\\n      16,\\n      177,\\n      2,\\n      0,\\n      4,\\n      0,\\n      16,\\n      0,\\n      100,\\n      97,\\n      116,\\n      97,\\n      l2 & 255,\\n      (l2 >> 8) & 255,\\n      (l2 >> 16) & 255,\\n      (l2 >> 24) & 255\\n    ]);\\n\\n    // Append actual wave data\\n    for (var i = 0, idx = headerLen; i < mNumWords; ++i) {\\n      // Note: We clamp here\\n      var y = mMixBuf[i];\\n      y = y < -32767 ? -32767 : y > 32767 ? 32767 : y;\\n      wave[idx++] = y & 255;\\n      wave[idx++] = (y >> 8) & 255;\\n    }\\n\\n    // Return the WAVE formatted typed array\\n    return wave;\\n  };\\n\\n  // Get n samples of wave data at time t [s]. Wave data in range [-2,2].\\n  this.getData = function (t, n) {\\n    var i = 2 * Math.floor(t * 44100);\\n    var d = new Array(n);\\n    for (var j = 0; j < 2 * n; j += 1) {\\n      var k = i + j;\\n      d[j] = t > 0 && k < mMixBuf.length ? mMixBuf[k] / 32768 : 0;\\n    }\\n    return d;\\n  };\\n};\\n\\n// This music has been exported by SoundBox. You can use it with\\n// http://sb.bitsnbites.eu/player-small.js in your own product.\\n\\n// See http://sb.bitsnbites.eu/demo.html for an example of how to\\n// use it in a demo.\\n\\n// Song data\\nvar song = {\\n  songData: [\\n    { // Instrument 0\\n      i: [\\n        0, // OSC1_WAVEFORM\\n        100, // OSC1_VOL\\n        128, // OSC1_SEMI\\n        0, // OSC1_XENV\\n        1, // OSC2_WAVEFORM\\n        201, // OSC2_VOL\\n        128, // OSC2_SEMI\\n        0, // OSC2_DETUNE\\n        0, // OSC2_XENV\\n        0, // NOISE_VOL\\n        0, // ENV_ATTACK\\n        8, // ENV_SUSTAIN\\n        28, // ENV_RELEASE\\n        0, // ARP_CHORD\\n        0, // ARP_SPEED\\n        0, // LFO_WAVEFORM\\n        194, // LFO_AMT\\n        4, // LFO_FREQ\\n        1, // LFO_FX_FREQ\\n        3, // FX_FILTER\\n        25, // FX_FREQ\\n        191, // FX_RESONANCE\\n        115, // FX_DIST\\n        244, // FX_DRIVE\\n        147, // FX_PAN_AMT\\n        6, // FX_PAN_FREQ\\n        43, // FX_DELAY_AMT\\n        4 // FX_DELAY_TIME\\n      ],\\n      // Patterns\\n      p: [5, 1, 2, 2, 1, 1, 1, 1, 3, 4, 1, 2, 1, 2, 1, 2, , , 7, 7, 7, 7, 7, 7, 7, 7],\\n      // Columns\\n      c: [\\n        {\\n          n: [132, 132, 134, 134, 135, 135, 132, 132, 137, 137, 135, 135, 134, 134, 135, 135, 139, 139, 137, 137, 135, 135, 137, 137, 134, , 133, , 132, , 131],\\n          f: [21, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 48]\\n        },\\n        {\\n          n: [132, 132, 134, 134, 135, 135, 132, 132, 137, 137, 135, 135, 134, 134, 135, 135, 139, 139, 137, 137, 135, 135, 137, 137, 139, 139, 135, 135, 134, 134, 130, 130],\\n          f: [, , , , , , , , , , , , , , , , , , , , , , , , , , , 11, 13, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 31]\\n        },\\n        {\\n          n: [],\\n          f: []\\n        },\\n        {\\n          n: [159, , , , , , , , 158, , , , , , , , 157, , , , , , , , 156, 155, 154, 153, 152, 151, 150, 149],\\n          f: [13, , , , , , , , , , , , , , , , , , , , , , , , 13, , 13, , 13, , 13, 11, 29, , , , , , , , , , , , , , , , , , , , , , , , 32, , 41, , 29, , 25, 15]\\n        },\\n        {\\n          n: [132, 132, 134, 134, 135, 135, 132, 132, 137, 137, 135, 135, 134, 134, 135, 135, 139, 139, 137, 137, 135, 135, 137, 137, 139, 139, 135, 135, 134, 134, 130, 130],\\n          f: [13, 11, 21, 17, , , , , , , , , , , , , , , , , , , , , , , , , , , , 17, 29, , 25, 113, , , , , , , , , , , , , , , , , , , , , , , , , , , , 194]\\n        },\\n        {\\n          n: [120, , , , , , , , 132, , , , , , , , 120, , , , , , , , 108],\\n          f: []\\n        },\\n        {\\n          n: [132, 144, 134, 146, 132, 144, 135, 147, 132, 144, 137, 149, 132, 144, 139, 151, 140, 152, 139, 151, 137, 149, 139, 151, 138, 150, 137, 149, 135, 147, 134, 146],\\n          f: []\\n        }\\n      ]\\n    },\\n    { // Instrument 1\\n      i: [\\n        0, // OSC1_WAVEFORM\\n        255, // OSC1_VOL\\n        117, // OSC1_SEMI\\n        1, // OSC1_XENV\\n        0, // OSC2_WAVEFORM\\n        255, // OSC2_VOL\\n        110, // OSC2_SEMI\\n        0, // OSC2_DETUNE\\n        1, // OSC2_XENV\\n        0, // NOISE_VOL\\n        4, // ENV_ATTACK\\n        6, // ENV_SUSTAIN\\n        35, // ENV_RELEASE\\n        0, // ARP_CHORD\\n        0, // ARP_SPEED\\n        0, // LFO_WAVEFORM\\n        0, // LFO_AMT\\n        0, // LFO_FREQ\\n        0, // LFO_FX_FREQ\\n        2, // FX_FILTER\\n        14, // FX_FREQ\\n        1, // FX_RESONANCE\\n        1, // FX_DIST\\n        39, // FX_DRIVE\\n        76, // FX_PAN_AMT\\n        5, // FX_PAN_FREQ\\n        0, // FX_DELAY_AMT\\n        0 // FX_DELAY_TIME\\n      ],\\n      // Patterns\\n      p: [, , 1, 3, 1, 3, 1, 3, 2, , , , 1, 3, 1, 3, 1, 3, , , 1, 3, 1, 3, 1, 3],\\n      // Columns\\n      c: [\\n        {\\n          n: [147, , , , , , 147, , , , 147, , , , , , 147, , , , , , 147, , , , 147, , , , 147],\\n          f: []\\n        },\\n        {\\n          n: [147],\\n          f: []\\n        },\\n        {\\n          n: [147, , , , , , 147, , , , 147, , , , 147, , 147, , , , , , 147, , , , 147, , , , 147, 147],\\n          f: []\\n        }\\n      ]\\n    },\\n    { // Instrument 2\\n      i: [\\n        0, // OSC1_WAVEFORM\\n        0, // OSC1_VOL\\n        140, // OSC1_SEMI\\n        0, // OSC1_XENV\\n        0, // OSC2_WAVEFORM\\n        0, // OSC2_VOL\\n        140, // OSC2_SEMI\\n        0, // OSC2_DETUNE\\n        0, // OSC2_XENV\\n        60, // NOISE_VOL\\n        4, // ENV_ATTACK\\n        10, // ENV_SUSTAIN\\n        68, // ENV_RELEASE\\n        0, // ARP_CHORD\\n        0, // ARP_SPEED\\n        0, // LFO_WAVEFORM\\n        187, // LFO_AMT\\n        5, // LFO_FREQ\\n        0, // LFO_FX_FREQ\\n        1, // FX_FILTER\\n        239, // FX_FREQ\\n        135, // FX_RESONANCE\\n        0, // FX_DIST\\n        32, // FX_DRIVE\\n        108, // FX_PAN_AMT\\n        5, // FX_PAN_FREQ\\n        16, // FX_DELAY_AMT\\n        4 // FX_DELAY_TIME\\n      ],\\n      // Patterns\\n      p: [, , 1, 1, 2, 3, 2, 3, 4, , , , 2, 3, 2, 3, 2, 3, , , 5, 5, 5, 5, 5, 5],\\n      // Columns\\n      c: [\\n        {\\n          n: [, , , , 147, , , , , , , , 148, , , , , , , , 147, , , , , , , , 147],\\n          f: [13, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 35]\\n        },\\n        {\\n          n: [, , , , 147, , , 147, , , , , 148, , , , , , , , 147, , , 147, , , 147, , , , 147],\\n          f: [13, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 35]\\n        },\\n        {\\n          n: [, , , , 147, , , 147, , , , , 148, , , , , , , , 147, , , 147, , , 147, , , 147, 147, 147],\\n          f: [13, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 35]\\n        },\\n        {\\n          n: [147],\\n          f: [13, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 68]\\n        },\\n        {\\n          n: [147, , , 147, , , 147, , 147, , , 147, , 147, , 147, 147, , , 147, , , 147, , 147, , , 147, , 147, , 147],\\n          f: [13, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 35]\\n        }\\n      ]\\n    },\\n    { // Instrument 3\\n      i: [\\n        2, // OSC1_WAVEFORM\\n        192, // OSC1_VOL\\n        128, // OSC1_SEMI\\n        0, // OSC1_XENV\\n        2, // OSC2_WAVEFORM\\n        192, // OSC2_VOL\\n        140, // OSC2_SEMI\\n        18, // OSC2_DETUNE\\n        0, // OSC2_XENV\\n        0, // NOISE_VOL\\n        107, // ENV_ATTACK\\n        115, // ENV_SUSTAIN\\n        138, // ENV_RELEASE\\n        0, // ARP_CHORD\\n        0, // ARP_SPEED\\n        0, // LFO_WAVEFORM\\n        136, // LFO_AMT\\n        5, // LFO_FREQ\\n        1, // LFO_FX_FREQ\\n        2, // FX_FILTER\\n        8, // FX_FREQ\\n        93, // FX_RESONANCE\\n        22, // FX_DIST\\n        56, // FX_DRIVE\\n        148, // FX_PAN_AMT\\n        5, // FX_PAN_FREQ\\n        85, // FX_DELAY_AMT\\n        8 // FX_DELAY_TIME\\n      ],\\n      // Patterns\\n      p: [3, , 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2],\\n      // Columns\\n      c: [\\n        {\\n          n: [120],\\n          f: []\\n        },\\n        {\\n          n: [120],\\n          f: []\\n        },\\n        {\\n          n: [120],\\n          f: [, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 24, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 56]\\n        }\\n      ]\\n    },\\n    { // Instrument 4\\n      i: [\\n        3, // OSC1_WAVEFORM\\n        0, // OSC1_VOL\\n        127, // OSC1_SEMI\\n        0, // OSC1_XENV\\n        3, // OSC2_WAVEFORM\\n        68, // OSC2_VOL\\n        127, // OSC2_SEMI\\n        0, // OSC2_DETUNE\\n        1, // OSC2_XENV\\n        218, // NOISE_VOL\\n        11, // ENV_ATTACK\\n        0, // ENV_SUSTAIN\\n        40, // ENV_RELEASE\\n        0, // ARP_CHORD\\n        0, // ARP_SPEED\\n        1, // LFO_WAVEFORM\\n        55, // LFO_AMT\\n        4, // LFO_FREQ\\n        1, // LFO_FX_FREQ\\n        2, // FX_FILTER\\n        67, // FX_FREQ\\n        115, // FX_RESONANCE\\n        124, // FX_DIST\\n        190, // FX_DRIVE\\n        67, // FX_PAN_AMT\\n        6, // FX_PAN_FREQ\\n        39, // FX_DELAY_AMT\\n        1 // FX_DELAY_TIME\\n      ],\\n      // Patterns\\n      p: [, , , 2, 1, 2, 1, 2, 3, , , , 1, 2, 1, 2, 1, 2, , , 1, 4, 1, 4, 1, 4],\\n      // Columns\\n      c: [\\n        {\\n          n: [, , , , 147, , , , , , , , 147, , , , , , , , 147, , , , , , , , 147],\\n          f: []\\n        },\\n        {\\n          n: [, , , , 147, , , , , , 147, , 147, , , , , , , , 147, , , , , , , , 147],\\n          f: []\\n        },\\n        {\\n          n: [147],\\n          f: []\\n        },\\n        {\\n          n: [, , , , 147, , , , , , , , 147, , , , , , , , 147, , , , , , , , 147, , , 147],\\n          f: []\\n        }\\n      ]\\n    },\\n    { // Instrument 5\\n      i: [\\n        3, // OSC1_WAVEFORM\\n        91, // OSC1_VOL\\n        128, // OSC1_SEMI\\n        0, // OSC1_XENV\\n        0, // OSC2_WAVEFORM\\n        95, // OSC2_VOL\\n        128, // OSC2_SEMI\\n        12, // OSC2_DETUNE\\n        0, // OSC2_XENV\\n        0, // NOISE_VOL\\n        12, // ENV_ATTACK\\n        0, // ENV_SUSTAIN\\n        67, // ENV_RELEASE\\n        0, // ARP_CHORD\\n        0, // ARP_SPEED\\n        0, // LFO_WAVEFORM\\n        0, // LFO_AMT\\n        0, // LFO_FREQ\\n        0, // LFO_FX_FREQ\\n        2, // FX_FILTER\\n        255, // FX_FREQ\\n        15, // FX_RESONANCE\\n        0, // FX_DIST\\n        32, // FX_DRIVE\\n        83, // FX_PAN_AMT\\n        3, // FX_PAN_FREQ\\n        51, // FX_DELAY_AMT\\n        4 // FX_DELAY_TIME\\n      ],\\n      // Patterns\\n      p: [, , , , 1, 2, 1, 2, 1, 2, , , 1, 2, 3, 2, 1, 2, , , , , 5, 4, 5, 4],\\n      // Columns\\n      c: [\\n        {\\n          n: [156, , , 164, , , 163, , 161, , , , , , , , , , 158, , 159, , 161, , 159, , 158, , 159, , 154, , 159],\\n          f: [5, 13, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 67]\\n        },\\n        {\\n          n: [144, , , 147, , , 149, , 151, , , , , , , , , , 149, , 151, , 152, , 151, , 151, , 147, , 147, , 139],\\n          f: []\\n        },\\n        {\\n          n: [156, , , 156, , , 156, , 154, , , 154, , , 154, , 152, , , 152, , , 152, , 151, , , 147, , , 146, , , , 151, , , 151, , 151, , , 146, , , 146, , 146, , , 144, , , 144, , 144, , , 142, , , 139, , 137],\\n          f: [5, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 3]\\n        },\\n        {\\n          n: [163, , 164, , 166, , 163, , 163, , 164, , 166, , 163, , 163, , 164, , 166, , 163, , 163, , 164, , 166, , 163],\\n          f: [13, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 25]\\n        },\\n        {\\n          n: [168, , 170, , 171, , 168, , 168, , 170, , 171, , 168, , 159, , 159, , 158, , 158, , 157, , 157, , 156, , 156],\\n          f: [, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 13, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 67]\\n        }\\n      ]\\n    },\\n    { // Instrument 6\\n      i: [\\n        0, // OSC1_WAVEFORM\\n        146, // OSC1_VOL\\n        140, // OSC1_SEMI\\n        0, // OSC1_XENV\\n        1, // OSC2_WAVEFORM\\n        224, // OSC2_VOL\\n        128, // OSC2_SEMI\\n        3, // OSC2_DETUNE\\n        0, // OSC2_XENV\\n        0, // NOISE_VOL\\n        61, // ENV_ATTACK\\n        0, // ENV_SUSTAIN\\n        63, // ENV_RELEASE\\n        0, // ARP_CHORD\\n        0, // ARP_SPEED\\n        3, // LFO_WAVEFORM\\n        179, // LFO_AMT\\n        5, // LFO_FREQ\\n        1, // LFO_FX_FREQ\\n        3, // FX_FILTER\\n        37, // FX_FREQ\\n        162, // FX_RESONANCE\\n        0, // FX_DIST\\n        67, // FX_DRIVE\\n        150, // FX_PAN_AMT\\n        3, // FX_PAN_FREQ\\n        37, // FX_DELAY_AMT\\n        2 // FX_DELAY_TIME\\n      ],\\n      // Patterns\\n      p: [, 1, , , , , , , , , 1, 2, 3, , 1, 2, 1, 2, 3, , 4, 5],\\n      // Columns\\n      c: [\\n        {\\n          n: [, , , , , , , , , , , , , , , , , , , , , , , , 122, , 121, , 120, , 119],\\n          f: []\\n        },\\n        {\\n          n: [, , , , , , , , , , , , 110, 109, , , , , , , , , , , , , , , 132, 144, 120, 108],\\n          f: [11, , , , , , , , , , , , , , , , , , , , , , , , , , , , 11, , , , 95, , , , , , , , , , , , , , , , , , , , , , , , , , , , 29]\\n        },\\n        {\\n          n: [123],\\n          f: [24, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 24, 52, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 67]\\n        },\\n        {\\n          n: [120, , , , , , 120, , 120, , , , , , , , , , , , , , , , , , , , , , , , 123, , , , , , 123, , 123, , , , , , , , , , , , , , , , , , , , , , , , 125, , , , , , 125, , 125],\\n          f: [11, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 95]\\n        },\\n        {\\n          n: [120, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 123, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 125],\\n          f: []\\n        }\\n      ]\\n    },\\n    { // Instrument 7\\n      i: [\\n        2, // OSC1_WAVEFORM\\n        138, // OSC1_VOL\\n        116, // OSC1_SEMI\\n        0, // OSC1_XENV\\n        2, // OSC2_WAVEFORM\\n        138, // OSC2_VOL\\n        128, // OSC2_SEMI\\n        4, // OSC2_DETUNE\\n        0, // OSC2_XENV\\n        0, // NOISE_VOL\\n        47, // ENV_ATTACK\\n        48, // ENV_SUSTAIN\\n        107, // ENV_RELEASE\\n        124, // ARP_CHORD\\n        3, // ARP_SPEED\\n        0, // LFO_WAVEFORM\\n        139, // LFO_AMT\\n        4, // LFO_FREQ\\n        1, // LFO_FX_FREQ\\n        3, // FX_FILTER\\n        64, // FX_FREQ\\n        160, // FX_RESONANCE\\n        3, // FX_DIST\\n        32, // FX_DRIVE\\n        147, // FX_PAN_AMT\\n        4, // FX_PAN_FREQ\\n        121, // FX_DELAY_AMT\\n        5 // FX_DELAY_TIME\\n      ],\\n      // Patterns\\n      p: [, , , , , , , , 1, , , , , , , , , , 1],\\n      // Columns\\n      c: [\\n        {\\n          n: [156, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , 168],\\n          f: []\\n        }\\n      ]\\n    },\\n  ],\\n  rowLen: 5513,   // In sample lengths\\n  patternLen: 32,  // Rows per pattern\\n  endPattern: 25,  // End pattern\\n  numChannels: 8  // Number of channels\\n};\\n\\nlet player = new Soundbox();\\nplayer.init(song);\\n\\n// Initialize music generation (player).\\nplayer.init(song);\\n\\n// Generate music...\\nlet done = false;\\nsetInterval(function () {\\n  if (done) {\\n    return;\\n  }\\n\\n  done = player.generate() >= 1;\\n\\n  if (done) {\\n    // Put the generated song in an Audio element.\\n    let wave = player.createWave();\\n    postMessage(wave);\\n  }\\n}, 10);\\n\\n/* harmony default export */ __webpack_exports__[\\\"default\\\"] = (player);\\n\\n\\n/***/ })\\n\\n/******/ });\\n//# sourceMappingURL=9d71fd9bba6c2a765428.worker.js.map\", null);\n};"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClxeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACpCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3JA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7aA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChDA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACljKA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvCA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxFA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACtIA;AACA;AACA;;;;A","sourceRoot":""}